<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Aug 10 13:46:57 2014
<BR><P>
<H3>Maximum Stack Usage =       1556 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; eigenmath_main &rArr; input_eval_loop() &rArr; run(char*) &rArr; printline(U*) &rArr; print_expr(U*) &rArr; print_term(U*) &rArr; print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8c]">cmp_expr(U*, U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">cmp_expr(U*, U*)</a><BR>
 <LI><a href="#[113]">lessp(U*, U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">cmp_expr(U*, U*)</a><BR>
 <LI><a href="#[89]">equal(U*, U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">cmp_expr(U*, U*)</a><BR>
 <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[9c]">untag(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">untag(U*)</a><BR>
 <LI><a href="#[88]">iszero(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[88]">iszero(U*)</a><BR>
 <LI><a href="#[86]">tensor_plus_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">add()</a><BR>
 <LI><a href="#[84]">combine_terms(U**, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[8e]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e]">qsort</a><BR>
 <LI><a href="#[2e0]">yymultiply()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[7d]">multiply_all(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[d4]">divide()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[136]">inverse()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[d2]">rect()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">rect()</a><BR>
 <LI><a href="#[94]">subtract()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[359]">sine_of_angle_sum()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[146]">isnpi(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[145]">cosine_of_angle_sum()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[142]">cosine_of_angle()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[358]">sine_of_angle()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[c4]">numerator()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">numerator()</a><BR>
 <LI><a href="#[319]">yyrationalize()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[135]">yycondense()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[235]">eval_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[120]">exponential()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[11f]">expsin()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[11e]">expcos()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[11d]">circexp()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11d]">circexp()</a><BR>
 <LI><a href="#[122]">eval_circexp()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[11b]">eval_choose()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[117]">eval_ceiling()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[10f]">eval_binomial()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[d9]">eval_atomize()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[d5]">eval_arg()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d1]">arg()</a><BR>
 <LI><a href="#[cd]">eval_arctanh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[c0]">arctan()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">numerator()</a><BR>
 <LI><a href="#[c3]">find(U*, U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">find(U*, U*)</a><BR>
 <LI><a href="#[c5]">denominator()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">denominator()</a><BR>
 <LI><a href="#[7c]">reciprocate()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[c8]">eval_arctan()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[be]">eval_arcsinh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[b9]">arcsin()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[bb]">eval_arcsin()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[b7]">eval_arccosh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[a6]">arccos()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[ad]">eval_arccos()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[97]">cofactor(U*, int, int, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[132]">determinant(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[98]">eval_adj()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[91]">eval_add()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[81]">eval_abs()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[233]">eval_zero()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[22d]">eval_test()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1fc]">eval_predicate()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1fd]">eval_testeq()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[22b]">eval_tanh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[228]">eval_sinh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[223]">eval_rect()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">rect()</a><BR>
 <LI><a href="#[d3]">real()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">rect()</a><BR>
 <LI><a href="#[222]">eval_real()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[d0]">imag()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">rect()</a><BR>
 <LI><a href="#[20c]">eval_imag()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[22a]">eval_tan()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[35d]">yytangent()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[229]">eval_sum()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[227]">eval_sin()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[225]">eval_sgn()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[34a]">yysgn()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[216]">eval_mod()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[215]">eval_mag()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[214]">eval_log()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[2a3]">yylog()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">numerator()</a><BR>
 <LI><a href="#[211]">eval_lcm()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[26e]">gcd_main()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[26d]">gcd_expr_expr()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[26c]">gcd_expr(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[137]">gcd()</a><BR>
 <LI><a href="#[26b]">gcd_term_term()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[26a]">gcd_term_factor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[269]">gcd_factor_term()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[20b]">eval_gcd()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[209]">eval_for()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[234]">eval_user_function()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1a0]">eval_derivative()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[19e]">d_tensor_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">derivative()</a><BR>
 <LI><a href="#[19d]">d_tensor_scalar()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">derivative()</a><BR>
 <LI><a href="#[19f]">d_scalar_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">derivative()</a><BR>
 <LI><a href="#[19c]">d_scalar_scalar()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">derivative()</a><BR>
 <LI><a href="#[19a]">dsum()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">derivative()</a><BR>
 <LI><a href="#[199]">dproduct()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">derivative()</a><BR>
 <LI><a href="#[197]">dpower()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[196]">dd()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">derivative()</a><BR>
 <LI><a href="#[195]">dlog()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">derivative()</a><BR>
 <LI><a href="#[194]">dsin()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[193]">dcos()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[192]">dtan()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[191]">darcsin()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[190]">darccos()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[354]">simplify_main()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[355]">f1()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17a]">rationalize()</a><BR>
 <LI><a href="#[34f]">count(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34f]">count(U*)</a><BR>
 <LI><a href="#[356]">f2()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">Condense()</a><BR>
 <LI><a href="#[357]">f4()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17a]">rationalize()</a><BR>
 <LI><a href="#[353]">simplify_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">simplify()</a><BR>
 <LI><a href="#[351]">f5()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[350]">f9()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">simplify()</a><BR>
 <LI><a href="#[18f]">darctan()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[18e]">dsinh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[18c]">dcosh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[18b]">dtanh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[18a]">darcsinh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[189]">darccosh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[188]">darctanh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[186]">dabs()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[184]">dsgn()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[1a7]">ydirac()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[182]">dhermite()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[271]">yyhermite()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[130]">subst()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[130]">subst()</a><BR>
 <LI><a href="#[270]">yyhermite2(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[181]">derf()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[17f]">derfc()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[175]">integral()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[283]">integral_of_sum()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[175]">integral()</a><BR>
 <LI><a href="#[281]">integral_of_product()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[282]">partition()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[e0]">polyform()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e0]">polyform()</a><BR>
 <LI><a href="#[dd]">coeff()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[280]">transform(char**)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[16e]">decomp()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16e]">decomp()</a><BR>
 <LI><a href="#[16f]">decomp_sum()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[16d]">decomp_product()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16e]">decomp()</a><BR>
 <LI><a href="#[364]">f_equals_a(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[337]">scan_expression()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[339]">scan_term()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[338]">scan_power()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[338]">scan_power()</a><BR>
 <LI><a href="#[101]">bignum_scan_integer(char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[336]">scan_factor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[337]">scan_expression()</a><BR>
 <LI><a href="#[335]">scan_subexpr()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[332]">scan_stmt()</a><BR>
 <LI><a href="#[331]">scan_function_call()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[332]">scan_stmt()</a><BR>
 <LI><a href="#[367]">rewrite_args()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[367]">rewrite_args()</a><BR>
 <LI><a href="#[366]">rewrite_args_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[367]">rewrite_args()</a><BR>
 <LI><a href="#[221]">eval_rationalize()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[232]">eval_transpose()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[219]">eval_numerator()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">numerator()</a><BR>
 <LI><a href="#[226]">eval_simplify()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[220]">eval_quotient()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[242]">divpoly()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[213]">eval_legendre()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[2a0]">__legendre()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[29f]">__legendre2(int, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[29d]">__legendre3(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[29e]">square()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[210]">eval_laguerre()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[298]">laguerre()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[297]">laguerre2(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[20e]">eval_integral()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[21f]">eval_product()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[212]">eval_leading()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[29c]">leading()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[177]">yydegree(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[177]">yydegree(U*)</a><BR>
 <LI><a href="#[25d]">filter_sum()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">filter()</a><BR>
 <LI><a href="#[25c]">filter_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">filter()</a><BR>
 <LI><a href="#[20f]">eval_isprime()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[363]">cmp_args()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1bb]">yyfloat()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">yyfloat()</a><BR>
 <LI><a href="#[22c]">eval_taylor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[361]">taylor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[218]">eval_nroots()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[206]">eval_filter()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[205]">eval_factor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[253]">yyfactorpoly()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[252]">print(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[300]">print_expr(U*)</a><BR>
 <LI><a href="#[256]">multiply_noexpand()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[258]">negate_noexpand()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[254]">isfloating(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[254]">isfloating(U*)</a><BR>
 <LI><a href="#[255]">rationalize_coefficients(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[257]">yydivpoly()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[250]">get_factor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[24f]">evalpoly()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[1ac]">__factor_add()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[1aa]">gen(int, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[204]">eval_expsin()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[203]">eval_expcos()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[202]">eval_expand()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[241]">expand()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">numerator()</a><BR>
 <LI><a href="#[6f]">inner()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[27c]">tensor_times_scalar()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[27d]">scalar_times_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[27b]">inner_f()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[240]">expand_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[241]">expand()</a><BR>
 <LI><a href="#[23e]">remove_negative_exponents()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[23d]">expand_get_C()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[23c]">expand_get_CF()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[23b]">trivial_divide()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[23a]">expand_get_B()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[238]">expand_get_AF()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[1a2]">lu_decomp(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[284]">decomp(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[224]">eval_roots()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[31f]">mini_solve()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[21e]">eval_prime()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[21d]">eval_power()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[21c]">eval_polar()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[13d]">polar()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d1]">arg()</a><BR>
 <LI><a href="#[21b]">eval_outer()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[2ec]">outer()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[2eb]">yyouter()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[20d]">eval_inner()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[20a]">eval_gamma()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[267]">gammaf()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[265]">gamma_of_sum()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[208]">eval_floor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[207]">eval_float()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1fb]">eval_det()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1fa]">eval_dim()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1f9]">eval_divisors()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1f8]">eval_do()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1f7]">eval_dsolve()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1b6]">dsolve()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[1b5]">distilly()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1f6]">eval_eval()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1f5]">eval_exp()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1f4]">eval_factorial()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1f2]">eval_factorpoly()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1f1]">eval_hermite()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1ef]">eval_hilbert()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1ed]">eval_index()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1eb]">eval_inv()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1e9]">eval_invg()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1e8]">eval_isinteger()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1e7]">eval_multiply()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[1e6]">eval_number()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1e5]">eval_operator()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1e3]">eval_rank()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1e2]">eval_setq()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1e0]">setq_indexed()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[172]">define_user_function()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1df]">eval_sqrt()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[1dd]">eval_subst()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1dc]">eval_unit()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1d7]">eval_erfc()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1d2]">eval_erf()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1d1]">yyerf()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[1c9]">eval_print()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1ba]">check_arg()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1a8]">eval_dirac()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[17b]">eval_denominator()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[179]">eval_degree()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[174]">eval_defint()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[170]">eval_decomp()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[14e]">eval_cosh()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[149]">eval_cos()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[140]">eval_contract()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[13c]">eval_conj()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">conjugate()</a><BR>
 <LI><a href="#[12a]">clockform()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d1]">arg()</a><BR>
 <LI><a href="#[13a]">eval_condense()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[133]">eval_cofactor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[12e]">eval_coeff()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[12c]">eval_clock()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[127]">defn()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[1d9]">eval_sym()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">eval()</a><BR>
 <LI><a href="#[31a]">__rationalize_tensor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17a]">rationalize()</a><BR>
 <LI><a href="#[316]">__lcm()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[2af]">yymag()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">rect()</a><BR>
 <LI><a href="#[cf]">yyarg()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d1]">arg()</a><BR>
 <LI><a href="#[2f8]">yypower()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">conjugate()</a><BR>
 <LI><a href="#[1b1]">dpow()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[311]">qpowf()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[312]">quickfactor()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[310]">normalize_angle()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">negate()</a><BR>
 <LI><a href="#[2f5]">power_sum(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">power()</a><BR>
 <LI><a href="#[2f4]">multinomial_sum(int, int, int*, int, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[2f3]">simplify_polar()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[292]">isquarterturn(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">multiply()</a><BR>
 <LI><a href="#[74]">absval()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">absval()</a><BR>
 <LI><a href="#[307]">print_denom(U*, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[300]">print_expr(U*)</a><BR>
 <LI><a href="#[305]">print_factor(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[300]">print_expr(U*)</a><BR>
 <LI><a href="#[303]">print_tensor_inner(U*, int, int*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[300]">print_expr(U*)</a><BR>
 <LI><a href="#[302]">print_index_function(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[300]">print_expr(U*)</a><BR>
 <LI><a href="#[2ff]">print_subexpr(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[300]">print_expr(U*)</a><BR>
 <LI><a href="#[301]">print_factorial_function(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[300]">print_expr(U*)</a><BR>
 <LI><a href="#[83]">test(char*, char**, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[129]">run(char*)</a><BR>
 <LI><a href="#[33e]">test_low_level()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[129]">run(char*)</a><BR>
 <LI><a href="#[30f]">print1(U*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30f]">print1(U*)</a><BR>
 <LI><a href="#[de]">bake()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[de]">bake()</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">__cmp(const void*, const void*)</a> from divisors.o(.text) referenced 2 times from divisors.o(.text)
 <LI><a href="#[8b]">cmp_terms(const void*, const void*)</a> from add.o(.text) referenced from add.o(.text)
 <LI><a href="#[61]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[63]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[62]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[66]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[66]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[65]">fputc</a> from usart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[64]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[5d]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[4b5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[68]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[499]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4b7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4b8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4b9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4ba]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4bb]"></a>__asm___10_powerman_c_91ba9053____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerman.o(.emb_text), UNUSED)

<P><STRONG><a name="[4bc]"></a>__asm___10_powerman_c_91ba9053____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerman.o(.emb_text), UNUSED)

<P><STRONG><a name="[420]"></a>WFI</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, powerman.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_EnterStandbyMode
</UL>

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[411]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetCPUFreq
</UL>

<P><STRONG><a name="[6b]"></a>absval_tensor()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, abs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404<LI>Call Chain = absval_tensor() &rArr; conjugate() &rArr; negate() &rArr; multiply() &rArr; yymultiply() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
</UL>

<P><STRONG><a name="[74]"></a>absval()</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, abs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428 + In Cycle
<LI>Call Chain = absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscomplexnumber(U*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_abs()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
</UL>

<P><STRONG><a name="[81]"></a>eval_abs()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, abs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + In Cycle
<LI>Call Chain = eval_abs() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[82]"></a>test_abs()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, abs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_abs() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[84]"></a>combine_terms(U**, int)</STRONG> (Thumb, 720 bytes, Stack size 40 bytes, add.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + In Cycle
<LI>Call Chain = combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_plus_tensor()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_esc_flag()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_numbers()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
</UL>

<P><STRONG><a name="[8b]"></a>cmp_terms(const void*, const void*)</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, add.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = cmp_terms(const void*, const void*) &rArr; cmp_expr(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>add_terms(int)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, add.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_add()
</UL>

<P><STRONG><a name="[90]"></a>push_terms(U*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, add.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = push_terms(U*) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_add()
</UL>

<P><STRONG><a name="[91]"></a>eval_add()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, add.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + In Cycle
<LI>Call Chain = eval_add() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_terms(U*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[92]"></a>add()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, add.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = add() &rArr; add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_terms(U*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_plus_tensor()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evalpoly()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyfactorials()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lu_decomp(int)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpower()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsinh()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccosh()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhermite()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycontract()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_factors(int)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre2(int)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_sum()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_f()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_sum()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f9()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
</UL>

<P><STRONG><a name="[93]"></a>add_all(int)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, add.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = add_all(int) &rArr; add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_terms(U*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsum()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dproduct()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_sum()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac()
</UL>

<P><STRONG><a name="[94]"></a>subtract()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, add.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + In Cycle
<LI>Call Chain = subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybinomial()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydivpoly()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testeq()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsin()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctanh()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_defint()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre2(int, int)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre2(int)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp(int)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite2(int)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_equals_a(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_polar()
</UL>

<P><STRONG><a name="[95]"></a>adj()</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, adj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = adj() &rArr; cofactor(U*, int, int, int) &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cofactor(U*, int, int, int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_adj()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
</UL>

<P><STRONG><a name="[98]"></a>eval_adj()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + In Cycle
<LI>Call Chain = eval_adj() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[99]"></a>test_adj()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_adj() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[9a]"></a>alloc_mem()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = alloc_mem() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
</UL>

<P><STRONG><a name="[9c]"></a>untag(U*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = untag(U*) &rArr;  untag(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;untag(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;untag(U*)
</UL>

<P><STRONG><a name="[9d]"></a>gc()</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gc() &rArr; untag(U*) &rArr;  untag(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;untag(U*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
</UL>

<P><STRONG><a name="[a0]"></a>alloc()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_factorial(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_numbers()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_integer(char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_power_number(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_string(char*)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_factor(unsigned*, int)
</UL>

<P><STRONG><a name="[96]"></a>alloc_tensor(int)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomize()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_plus_tensor()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_B()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_A()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_zero()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_function(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_component(int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tensor()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_unit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_tensor()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_scalar()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_tensor()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycontract()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyouter()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyinvg()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_f()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_zero_matrix(int, int)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_tensor()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promote_tensor()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_tensor()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_tensor(int)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
</UL>

<P><STRONG><a name="[a2]"></a>print_mem_info()</STRONG> (Thumb, 78 bytes, Stack size 112 bytes, alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = print_mem_info() &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
</UL>

<P><STRONG><a name="[a5]"></a>append()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, append.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = append() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
</UL>

<P><STRONG><a name="[a6]"></a>arccos()</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, arccos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = arccos() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusoneoversqrttwo(U*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoneoversqrttwo(U*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arccos()
</UL>

<P><STRONG><a name="[ad]"></a>eval_arccos()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, arccos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = eval_arccos() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[ae]"></a>test_arccos()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arccos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_arccos() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[af]"></a>arccosh()</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, arccosh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = arccosh() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isplusone(U*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arccosh()
</UL>

<P><STRONG><a name="[b7]"></a>eval_arccosh()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, arccosh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = eval_arccosh() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[b8]"></a>test_arccosh()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arccosh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_arccosh() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[b9]"></a>arcsin()</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, arcsin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = arcsin() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusoneoversqrttwo(U*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoneoversqrttwo(U*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arcsin()
</UL>

<P><STRONG><a name="[bb]"></a>eval_arcsin()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, arcsin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = eval_arcsin() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[bc]"></a>test_arcsin()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arcsin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_arcsin() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[bd]"></a>arcsinh()</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, arcsinh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = arcsinh() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arcsinh()
</UL>

<P><STRONG><a name="[be]"></a>eval_arcsinh()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, arcsinh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = eval_arcsinh() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[bf]"></a>test_arcsinh()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arcsinh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_arcsinh() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[c0]"></a>arctan()</STRONG> (Thumb, 662 bytes, Stack size 32 bytes, arctan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + In Cycle
<LI>Call Chain = arctan() &rArr;  numerator() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalq(U*, int, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegative(U*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arctan()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
</UL>

<P><STRONG><a name="[c8]"></a>eval_arctan()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, arctan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + In Cycle
<LI>Call Chain = eval_arctan() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[c9]"></a>test_arctan()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arctan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_arctan() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[ca]"></a>arctanh()</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, arctanh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = arctanh() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arctanh()
</UL>

<P><STRONG><a name="[cd]"></a>eval_arctanh()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, arctanh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = eval_arctanh() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[ce]"></a>test_arctanh()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arctanh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_arctanh() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[cf]"></a>yyarg()</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, arg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268 + In Cycle
<LI>Call Chain = yyarg() &rArr;  arg() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegative(U*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
</UL>

<P><STRONG><a name="[d1]"></a>arg()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, arg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = arg() &rArr; yyarg() &rArr;  arg() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arg()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[d5]"></a>eval_arg()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, arg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + In Cycle
<LI>Call Chain = eval_arg() &rArr;  arg() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[d6]"></a>test_arg()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_arg() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[d7]"></a>atomize()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, atomize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = atomize() &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_atomize()
</UL>

<P><STRONG><a name="[d9]"></a>eval_atomize()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, atomize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = eval_atomize() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomize()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[da]"></a>bake_poly_term(int)</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, bake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = bake_poly_term(int) &rArr; push_integer(int) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
</UL>

<P><STRONG><a name="[dc]"></a>bake_poly()</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = bake_poly() &rArr; coeff() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly_term(int)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
</UL>

<P><STRONG><a name="[de]"></a>bake()</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, bake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + In Cycle
<LI>Call Chain = bake() &rArr;  bake() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly(U*, U*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
</UL>

<P><STRONG><a name="[e0]"></a>polyform()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + In Cycle
<LI>Call Chain = polyform() &rArr;  polyform() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly(U*, U*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
</UL>

<P><STRONG><a name="[e1]"></a>test_bake()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_bake() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[e2]"></a>mnew(int)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addf(unsigned*, unsigned*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subf(unsigned*, unsigned*)
</UL>

<P><STRONG><a name="[9f]"></a>mfree(unsigned*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mfree(unsigned*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscan(char*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstr(unsigned*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_factorial(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_rationals(U*, U*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mprime()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprimef(unsigned*, unsigned*, int)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mpow()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodf(int, int, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdivf(int, int, int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmulf(int, int, int)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodpow()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmodpow(unsigned*, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mgcd()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egcd(unsigned*, unsigned*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mcmp()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmpint(unsigned*, int)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msubf(int, int, int)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_maddf(int, int, int)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprime(unsigned*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_a()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_kth_prime(int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[e3]"></a>mint(int)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscan(char*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_factorial(int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_integer(char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mprime()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mpow()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodf(int, int, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdivf(int, int, int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmulf(int, int, int)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodpow()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmodpow(unsigned*, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mgcd()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mcmp()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmpint(unsigned*, int)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msubf(int, int, int)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_maddf(int, int, int)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subf(unsigned*, unsigned*)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_kth_prime(int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_factor(unsigned*, int)
</UL>

<P><STRONG><a name="[e4]"></a>mcopy(unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstr(unsigned*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprimef(unsigned*, unsigned*, int)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmodpow(unsigned*, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egcd(unsigned*, unsigned*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprime(unsigned*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2cb]"></a>ge(unsigned*, unsigned*, int)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ge(unsigned*, unsigned*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
</UL>

<P><STRONG><a name="[aa]"></a>push_double(double)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = push_double(double) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_float()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_float(char*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract_numbers()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_numbers()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[e5]"></a>convert_rational_to_double(U*)</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = convert_rational_to_double(U*) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_float()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_double()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_numbers(U*, U*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract_numbers()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_numbers()
</UL>

<P><STRONG><a name="[87]"></a>add_numbers()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = add_numbers() &rArr; qadd() &rArr; mgcd(unsigned*, unsigned*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
</UL>

<P><STRONG><a name="[e8]"></a>subtract_numbers()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>

<P><STRONG><a name="[ea]"></a>multiply_numbers()</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = multiply_numbers() &rArr; qmul() &rArr; mgcd(unsigned*, unsigned*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_factors(int)
</UL>

<P><STRONG><a name="[ec]"></a>divide_numbers()</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = divide_numbers() &rArr; qdiv() &rArr; mgcd(unsigned*, unsigned*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
</UL>

<P><STRONG><a name="[ee]"></a>invert_number()</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = invert_number() &rArr; push_double(double) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
</UL>

<P><STRONG><a name="[ef]"></a>compare_rationals(U*, U*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = compare_rationals(U*, U*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_numbers(U*, U*)
</UL>

<P><STRONG><a name="[f2]"></a>compare_numbers(U*, U*)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = compare_numbers(U*, U*) &rArr; compare_rationals(U*, U*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_rationals(U*, U*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
</UL>

<P><STRONG><a name="[f3]"></a>negate_number()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = negate_number() &rArr; push_double(double) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
</UL>

<P><STRONG><a name="[f4]"></a>bignum_truncate()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = bignum_truncate() &rArr; mdiv(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
</UL>

<P><STRONG><a name="[f6]"></a>mp_numerator()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = mp_numerator() &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
</UL>

<P><STRONG><a name="[f7]"></a>mp_denominator()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = mp_denominator() &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
</UL>

<P><STRONG><a name="[f8]"></a>bignum_power_number(int)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = bignum_power_number(int) &rArr; mpow(unsigned*, unsigned) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
</UL>

<P><STRONG><a name="[fa]"></a>convert_bignum_to_double(unsigned*)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8f]"></a>push_integer(int)</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = push_integer(int) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly_term(int)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_negative_exponents()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trivial_divide()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_B()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_test()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_not()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_and()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_or()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_transpose()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_legendre()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_laguerre()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isprime()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testlt()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testle()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testgt()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testge()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testeq()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_taylor()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dim()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_number()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rank()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_small_number()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtan()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsin()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtanh()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsinh()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccosh()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctanh()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsgn()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhermite()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnpi(U*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_contract()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;square()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre2(int, int)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre2(int)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isquarterturn(U*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite2(int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_main()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_sum()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f9()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_polar()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_a()
</UL>

<P><STRONG><a name="[70]"></a>push_rational(int, int)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = push_rational(int, int) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sqrt()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsin()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsinh()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccosh()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssqrt()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[ac]"></a>pop_integer()</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = pop_integer() &rArr; restore() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_negative_exponents()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_zero()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_function(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_component(int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dim()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_unit()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_small_number()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnpi(U*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycontract()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cofactor()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isquarterturn(U*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[ff]"></a>print_double(U*, int)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[101]"></a>bignum_scan_integer(char*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + In Cycle
<LI>Call Chain = bignum_scan_integer(char*) &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscan(char*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
</UL>

<P><STRONG><a name="[103]"></a>bignum_scan_float(char*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = bignum_scan_float(char*) &rArr; push_double(double) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
</UL>

<P><STRONG><a name="[105]"></a>print_number(U*)</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = print_number(U*) &rArr; mstr(unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstr(unsigned*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isfraction(U*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print1(U*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[108]"></a>gcd_numbers()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = gcd_numbers() &rArr; mgcd(unsigned*, unsigned*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
</UL>

<P><STRONG><a name="[10a]"></a>pop_double()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = pop_double() &rArr; restore() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
</UL>

<P><STRONG><a name="[10b]"></a>bignum_float()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = bignum_float() &rArr; push_double(double) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
</UL>

<P><STRONG><a name="[10c]"></a>bignum_factorial(int)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = bignum_factorial(int) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
</UL>

<P><STRONG><a name="[2b5]"></a>mp_set_bit(unsigned*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_set_bit(unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[2da]"></a>mp_clr_bit(unsigned*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_clr_bit(unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[2b4]"></a>mshiftright(unsigned*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mshiftright(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmodpow(unsigned*, unsigned*, unsigned*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprime(unsigned*)
</UL>

<P><STRONG><a name="[10d]"></a>binomial()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, binomial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = binomial() &rArr; ybinomial() &rArr; subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybinomial()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_binomial()
</UL>

<P><STRONG><a name="[10f]"></a>eval_binomial()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, binomial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = eval_binomial() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binomial()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[110]"></a>test_binomial()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, binomial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_binomial() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[114]"></a>yyceiling()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ceiling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = yyceiling() &rArr; add() &rArr; add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceiling()
</UL>

<P><STRONG><a name="[116]"></a>ceiling()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ceiling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = ceiling() &rArr; yyceiling() &rArr; add() &rArr; add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_ceiling()
</UL>

<P><STRONG><a name="[117]"></a>eval_ceiling()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ceiling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = eval_ceiling() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceiling()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[118]"></a>test_ceiling()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ceiling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_ceiling() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[119]"></a>choose_check_args()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, choose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = choose_check_args() &rArr; lessp(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
</UL>

<P><STRONG><a name="[11a]"></a>choose()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, choose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = choose() &rArr; subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_check_args()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_choose()
</UL>

<P><STRONG><a name="[11b]"></a>eval_choose()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, choose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + In Cycle
<LI>Call Chain = eval_choose() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[11c]"></a>test_choose()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, choose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_choose() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[11d]"></a>circexp()</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, circexp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = circexp() &rArr;  circexp() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_circexp()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
</UL>

<P><STRONG><a name="[122]"></a>eval_circexp()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, circexp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = eval_circexp() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[123]"></a>test_circexp()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, circexp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_circexp() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[124]"></a>eval_clear()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, clear.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = eval_clear() &rArr; defn() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defn()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_symbols()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_term()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[128]"></a>clear()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clear.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
</UL>

<P><STRONG><a name="[12a]"></a>clockform()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + In Cycle
<LI>Call Chain = clockform() &rArr;  arg() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_conj()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clock()
</UL>

<P><STRONG><a name="[12c]"></a>eval_clock()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + In Cycle
<LI>Call Chain = eval_clock() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[12d]"></a>test_clock()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_clock() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[12e]"></a>eval_coeff()</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, coeff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = eval_coeff() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[dd]"></a>coeff()</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, coeff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + In Cycle
<LI>Call Chain = coeff() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
</UL>

<P><STRONG><a name="[131]"></a>test_coeff()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, coeff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_coeff() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[97]"></a>cofactor(U*, int, int, int)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cofactor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + In Cycle
<LI>Call Chain = cofactor(U*, int, int, int) &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cofactor()
</UL>

<P><STRONG><a name="[133]"></a>eval_cofactor()</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, cofactor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + In Cycle
<LI>Call Chain = eval_cofactor() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cofactor(U*, int, int, int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[134]"></a>test_cofactor()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cofactor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_cofactor() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[135]"></a>yycondense()</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, condense.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + In Cycle
<LI>Call Chain = yycondense() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyexpand()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Condense()
</UL>

<P><STRONG><a name="[139]"></a>Condense()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, condense.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164<LI>Call Chain = Condense() &rArr; yycondense() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_condense()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f2()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
</UL>

<P><STRONG><a name="[13a]"></a>eval_condense()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, condense.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + In Cycle
<LI>Call Chain = eval_condense() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Condense()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[13b]"></a>test_condense()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, condense.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_condense() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[6e]"></a>conjugate()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, conj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396<LI>Call Chain = conjugate() &rArr; negate() &rArr; multiply() &rArr; yymultiply() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_conj()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[13c]"></a>eval_conj()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, conj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + In Cycle
<LI>Call Chain = eval_conj() &rArr;  conjugate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[8a]"></a>cons()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly_term(int)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
</UL>

<P><STRONG><a name="[13e]"></a>yycontract()</STRONG> (Thumb, 450 bytes, Stack size 240 bytes, contract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = yycontract() &rArr; add() &rArr; add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contract()
</UL>

<P><STRONG><a name="[13f]"></a>contract()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, contract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = contract() &rArr; yycontract() &rArr; add() &rArr; add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycontract()
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_contract()
</UL>

<P><STRONG><a name="[140]"></a>eval_contract()</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, contract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + In Cycle
<LI>Call Chain = eval_contract() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contract()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[141]"></a>test_contract()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, contract.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_contract() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[142]"></a>cosine_of_angle()</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = cosine_of_angle() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegative(U*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
</UL>

<P><STRONG><a name="[145]"></a>cosine_of_angle_sum()</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = cosine_of_angle_sum() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnpi(U*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
</UL>

<P><STRONG><a name="[147]"></a>cosine()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = cosine() &rArr; cosine_of_angle_sum() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsin()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtan()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cos()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[149]"></a>eval_cos()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + In Cycle
<LI>Call Chain = eval_cos() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[14a]"></a>test_cos()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_cos() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[14b]"></a>yycosh()</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, cosh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = yycosh() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosh
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ycosh()
</UL>

<P><STRONG><a name="[14d]"></a>ycosh()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cosh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = ycosh() &rArr; yycosh() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsinh()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtanh()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cosh()
</UL>

<P><STRONG><a name="[14e]"></a>eval_cosh()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cosh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = eval_cosh() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ycosh()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[14f]"></a>test_cosh()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cosh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_cosh() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[158]"></a>locate(int, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dconsole.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleRedraw
</UL>

<P><STRONG><a name="[150]"></a>print(unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleRedraw
</UL>

<P><STRONG><a name="[154]"></a>WaitKey()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dconsole.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForKey
</UL>

<P><STRONG><a name="[165]"></a>dGetKeyChar(unsigned)</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, dconsole.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
</UL>

<P><STRONG><a name="[156]"></a>dConsoleRedraw</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(unsigned char*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locate(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsolePutChar
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleCls
</UL>

<P><STRONG><a name="[159]"></a>dConsoleCls</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dConsoleCls &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleRedraw
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_term()
</UL>

<P><STRONG><a name="[15a]"></a>printCursor()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = printCursor()
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CursorSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CursorEn
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
</UL>

<P><STRONG><a name="[15d]"></a>append(char*, const char*, int)</STRONG> (Thumb, 102 bytes, Stack size 1024 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = append(char*, const char*, int) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
</UL>

<P><STRONG><a name="[162]"></a>dConsolePut</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dConsolePut
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dPrintf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dPuts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
</UL>

<P><STRONG><a name="[163]"></a>dGetLine</STRONG> (Thumb, 1200 bytes, Stack size 48 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = dGetLine &rArr; append(char*, const char*, int) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectFont
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CursorEn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsolePut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append(char*, const char*, int)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printCursor()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleRedraw
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetKeyChar(unsigned)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(unsigned char*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locate(int, int)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
</UL>

<P><STRONG><a name="[169]"></a>dConsolePutChar</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleRedraw
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar(int)
</UL>

<P><STRONG><a name="[16a]"></a>dPuts</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dPuts &rArr; dConsolePut
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsolePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
</UL>

<P><STRONG><a name="[16b]"></a>dPrintf</STRONG> (Thumb, 34 bytes, Stack size 280 bytes, dconsole.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dPrintf &rArr; dConsolePut
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsolePut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenmath_main
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
</UL>

<P><STRONG><a name="[16d]"></a>decomp_product()</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, decomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = decomp_product() &rArr;  decomp() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
</UL>

<P><STRONG><a name="[16f]"></a>decomp_sum()</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, decomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + In Cycle
<LI>Call Chain = decomp_sum() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
</UL>

<P><STRONG><a name="[16e]"></a>decomp()</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, decomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = decomp() &rArr;  decomp() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_sum()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_product()
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_decomp()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_sum()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_product()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
</UL>

<P><STRONG><a name="[170]"></a>eval_decomp()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, decomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + In Cycle
<LI>Call Chain = eval_decomp() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[172]"></a>define_user_function()</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, define.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + In Cycle
<LI>Call Chain = define_user_function() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding_and_arglist(U*, U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_setq()
</UL>

<P><STRONG><a name="[174]"></a>eval_defint()</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, defint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + In Cycle
<LI>Call Chain = eval_defint() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[176]"></a>test_defint()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_defint() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[177]"></a>yydegree(U*)</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, degree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = yydegree(U*) &rArr;  yydegree(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydegree(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydegree(U*)
</UL>

<P><STRONG><a name="[178]"></a>degree()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, degree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = degree() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydegree(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_degree()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
</UL>

<P><STRONG><a name="[179]"></a>eval_degree()</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, degree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + In Cycle
<LI>Call Chain = eval_degree() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[c5]"></a>denominator()</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, denominator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = denominator() &rArr;  denominator() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize_coefficients(int)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_denominator()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
</UL>

<P><STRONG><a name="[17b]"></a>eval_denominator()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, denominator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + In Cycle
<LI>Call Chain = eval_denominator() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[17c]"></a>test_denominator()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, denominator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_denominator() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[17d]"></a>dfunction()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = dfunction() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[17e]"></a>derivative_of_integral()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = derivative_of_integral() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[17f]"></a>derfc()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = derfc() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[181]"></a>derf()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = derf() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[182]"></a>dhermite()</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + In Cycle
<LI>Call Chain = dhermite() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hermite()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[184]"></a>dsgn()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + In Cycle
<LI>Call Chain = dsgn() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirac()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[186]"></a>dabs()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + In Cycle
<LI>Call Chain = dabs() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[188]"></a>darctanh()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = darctanh() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[189]"></a>darccosh()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = darccosh() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[18a]"></a>darcsinh()</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = darcsinh() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[18b]"></a>dtanh()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = dtanh() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ycosh()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[18c]"></a>dcosh()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = dcosh() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ysinh()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[18e]"></a>dsinh()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = dsinh() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ycosh()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[18f]"></a>darctan()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 932 + In Cycle
<LI>Call Chain = darctan() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[190]"></a>darccos()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = darccos() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[191]"></a>darcsin()</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = darcsin() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[192]"></a>dtan()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + In Cycle
<LI>Call Chain = dtan() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[193]"></a>dcos()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + In Cycle
<LI>Call Chain = dcos() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[194]"></a>dsin()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + In Cycle
<LI>Call Chain = dsin() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[195]"></a>dlog()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + In Cycle
<LI>Call Chain = dlog() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[196]"></a>dd()</STRONG> (Thumb, 612 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = dd() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[197]"></a>dpower()</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = dpower() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logarithm()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[199]"></a>dproduct()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + In Cycle
<LI>Call Chain = dproduct() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[19a]"></a>dsum()</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = dsum() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
</UL>

<P><STRONG><a name="[19b]"></a>d_scalar_scalar_1()</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = d_scalar_scalar_1() &rArr; darctan() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsum()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dproduct()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpower()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dd()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsin()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcos()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtan()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsin()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsinh()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcosh()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtanh()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsinh()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccosh()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctanh()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dabs()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsgn()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhermite()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative_of_integral()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfunction()
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar()
</UL>

<P><STRONG><a name="[19c]"></a>d_scalar_scalar()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + In Cycle
<LI>Call Chain = d_scalar_scalar() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>

<P><STRONG><a name="[180]"></a>derivative()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = derivative() &rArr; d_scalar_scalar() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_tensor()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_scalar()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_tensor()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar()
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_tensor()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_scalar()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_tensor()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsum()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dproduct()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpower()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dd()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsin()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcos()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtan()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsin()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsinh()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcosh()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtanh()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsinh()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccosh()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctanh()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dabs()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsgn()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhermite()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre2(int, int)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
</UL>

<P><STRONG><a name="[1a0]"></a>eval_derivative()</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + In Cycle
<LI>Call Chain = eval_derivative() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1a1]"></a>test_derivative()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, derivative.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_derivative() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[132]"></a>determinant(int)</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, det.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + In Cycle
<LI>Call Chain = determinant(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cofactor(U*, int, int, int)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
</UL>

<P><STRONG><a name="[1a2]"></a>lu_decomp(int)</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, det.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = lu_decomp(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydetg()
</UL>

<P><STRONG><a name="[1a3]"></a>yydetg()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, det.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = yydetg() &rArr; lu_decomp(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lu_decomp(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detg()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
</UL>

<P><STRONG><a name="[1a4]"></a>det()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, det.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = det() &rArr; yydetg() &rArr; lu_decomp(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydetg()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_det()
</UL>

<P><STRONG><a name="[1a6]"></a>detg()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, det.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydetg()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
</UL>

<P><STRONG><a name="[185]"></a>dirac()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dirac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = dirac() &rArr; ydirac() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dirac()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsgn()
</UL>

<P><STRONG><a name="[1a8]"></a>eval_dirac()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dirac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + In Cycle
<LI>Call Chain = eval_dirac() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirac()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1a9]"></a>test_dirac()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dirac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_dirac() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[1ae]"></a>divisors_onstack()</STRONG> (Thumb, 542 bytes, Stack size 32 bytes, divisors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = divisors_onstack() &rArr; __factor_add() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_small_number()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors()
</UL>

<P><STRONG><a name="[1af]"></a>divisors()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, divisors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = divisors() &rArr; divisors_onstack() &rArr; __factor_add() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_divisors()
</UL>

<P><STRONG><a name="[1b0]"></a>test_divisors()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, divisors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_divisors() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[1b1]"></a>dpow()</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, dpow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + In Cycle
<LI>Call Chain = dpow() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_double()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[1b5]"></a>distilly()</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dsolve.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + In Cycle
<LI>Call Chain = distilly() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
</UL>

<P><STRONG><a name="[1b6]"></a>dsolve()</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, dsolve.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + In Cycle
<LI>Call Chain = dsolve() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan(char*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dsolve()
</UL>

<P><STRONG><a name="[1bc]"></a>eval_eigen()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, eigen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = eval_eigen() &rArr; eigen(int) &rArr; copy_tensor() &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_symbol(char*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1bf]"></a>eval_eigenval()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eigen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = eval_eigenval() &rArr; eigen(int) &rArr; copy_tensor() &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1c0]"></a>eval_eigenvec()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eigen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = eval_eigenvec() &rArr; eigen(int) &rArr; copy_tensor() &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1c1]"></a>test_eigen()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eigen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_eigen() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[1c2]"></a>input_eval_loop()</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, emain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532<LI>Call Chain = input_eval_loop() &rArr; run(char*) &rArr; printline(U*) &rArr; print_expr(U*) &rArr; print_term(U*) &rArr; print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_mem_info()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cmd_history(char*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetCPUFreq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dPrintf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dPuts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleRedraw
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenmath_main
</UL>

<P><STRONG><a name="[1c7]"></a>eigenmath_main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, emain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532<LI>Call Chain = eigenmath_main &rArr; input_eval_loop() &rArr; run(char*) &rArr; printline(U*) &rArr; print_expr(U*) &rArr; print_term(U*) &rArr; print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4bd]"></a>run_script(char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emain.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>check_execution_abort()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emain.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>clear_term()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, emain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = clear_term() &rArr; dConsoleCls &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleCls
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clear()
</UL>

<P><STRONG><a name="[1c8]"></a>eval_display()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, emain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = eval_display() &rArr; eval_print() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_print()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1ca]"></a>printchar(int)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, emain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsolePutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar_nowrap(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(char*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>

<P><STRONG><a name="[a4]"></a>printstr(char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, emain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_mem_info()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(char*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_input(char*)
</UL>

<P><STRONG><a name="[1cb]"></a>printchar_nowrap(int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar(int)
</UL>

<P><STRONG><a name="[1cc]"></a>eval_draw()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = eval_draw() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[4bf]"></a>eval_sample()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emain.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>get_curr_cmd()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, emain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_down_arrow()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_up_arrow()
</UL>

<P><STRONG><a name="[1cf]"></a>update_curr_cmd(char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_down_arrow()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_up_arrow()
</UL>

<P><STRONG><a name="[4c0]"></a>random(int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, emain.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>updateRandomUserObject()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emain.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>yerf()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, erf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = yerf() &rArr; yyerf() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_erf()
</UL>

<P><STRONG><a name="[1d2]"></a>eval_erf()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, erf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = eval_erf() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerf()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1d3]"></a>test_erf()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, erf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_erf() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[1d6]"></a>yerfc()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, erfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = yerfc() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_erfc()
</UL>

<P><STRONG><a name="[1d7]"></a>eval_erfc()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, erfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = eval_erfc() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1d8]"></a>test_erfc()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, erfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_erfc() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[1d9]"></a>eval_sym()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = eval_sym() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symnum(U*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>

<P><STRONG><a name="[1dc]"></a>eval_unit()</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = eval_unit() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1dd]"></a>eval_subst()</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = eval_subst() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1de]"></a>eval_stop()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = eval_stop() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1df]"></a>eval_sqrt()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = eval_sqrt() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1e0]"></a>setq_indexed()</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + In Cycle
<LI>Call Chain = setq_indexed() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_component(int)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_setq()
</UL>

<P><STRONG><a name="[1e2]"></a>eval_setq()</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + In Cycle
<LI>Call Chain = eval_setq() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setq_indexed()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_user_function()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1e3]"></a>eval_rank()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = eval_rank() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1e4]"></a>eval_quote()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = eval_quote() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1e5]"></a>eval_operator()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = eval_operator() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1e6]"></a>eval_number()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = eval_number() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1e7]"></a>eval_multiply()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = eval_multiply() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1e8]"></a>eval_isinteger()</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = eval_isinteger() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1e9]"></a>eval_invg()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + In Cycle
<LI>Call Chain = eval_invg() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1eb]"></a>eval_inv()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + In Cycle
<LI>Call Chain = eval_inv() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1ed]"></a>eval_index()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + In Cycle
<LI>Call Chain = eval_index() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_function(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1ef]"></a>eval_hilbert()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + In Cycle
<LI>Call Chain = eval_hilbert() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1f1]"></a>eval_hermite()</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + In Cycle
<LI>Call Chain = eval_hermite() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hermite()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1f2]"></a>eval_factorpoly()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + In Cycle
<LI>Call Chain = eval_factorpoly() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1f4]"></a>eval_factorial()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + In Cycle
<LI>Call Chain = eval_factorial() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1f5]"></a>eval_exp()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = eval_exp() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1f6]"></a>eval_eval()</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = eval_eval() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1f7]"></a>eval_dsolve()</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + In Cycle
<LI>Call Chain = eval_dsolve() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1f8]"></a>eval_do()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = eval_do() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1f9]"></a>eval_divisors()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + In Cycle
<LI>Call Chain = eval_divisors() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1fa]"></a>eval_dim()</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = eval_dim() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1fb]"></a>eval_det()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + In Cycle
<LI>Call Chain = eval_det() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1fc]"></a>eval_predicate()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = eval_predicate() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testeq()
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_test()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_not()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_and()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_or()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_check()
</UL>

<P><STRONG><a name="[1fe]"></a>eval_check()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = eval_check() &rArr; eval_predicate() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1ff]"></a>eval_binding()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = eval_binding() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[200]"></a>eval_cons()</STRONG> (Thumb, 1310 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = eval_cons() &rArr; eval_roots() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_circexp()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_choose()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_ceiling()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_binomial()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_atomize()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arg()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arctanh()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arctan()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arcsinh()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arcsin()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arccosh()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arccos()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_adj()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_add()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_abs()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_zero()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_test()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sinh()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rect()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_real()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_imag()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tan()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sin()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sgn()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_not()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_mod()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_mag()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_log()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_lcm()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_gcd()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_and()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_or()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symnum(U*)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rationalize()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_transpose()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_numerator()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_simplify()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_quotient()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_legendre()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_laguerre()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_leading()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isprime()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testlt()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testle()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testgt()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testge()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testeq()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_taylor()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_filter()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factor()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expsin()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expcos()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expand()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_prime()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_power()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_polar()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_outer()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_inner()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_gamma()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_floor()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_float()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_binding()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_check()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_det()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dim()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_divisors()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_do()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dsolve()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eval()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_exp()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factorial()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factorpoly()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_hermite()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_hilbert()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_index()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_inv()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_invg()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_multiply()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_number()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_operator()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_quote()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rank()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_setq()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sqrt()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_stop()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_subst()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_unit()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_erfc()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_erf()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_draw()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_display()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenvec()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenval()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigen()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dirac()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_denominator()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_degree()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_defint()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_decomp()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cosh()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cos()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_contract()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_conj()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_condense()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cofactor()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_coeff()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clock()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>

<P><STRONG><a name="[73]"></a>eval()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = eval() &rArr; eval_cons() &rArr; eval_roots() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_esc_flag()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tensor()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sym()
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_circexp()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_choose()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_ceiling()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_binomial()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_atomize()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arg()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arctanh()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arctan()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arcsinh()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arcsin()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arccosh()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arccos()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_adj()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_add()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_abs()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trivial_divide()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_zero()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_test()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sinh()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rect()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_real()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_imag()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tan()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sin()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sgn()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_mod()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_mag()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_log()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_lcm()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_gcd()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rationalize()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_transpose()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_numerator()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_simplify()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_quotient()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_legendre()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_laguerre()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_leading()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isprime()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testeq()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tensor()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_taylor()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_filter()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factor()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expsin()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expcos()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expand()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_prime()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_power()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_polar()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_outer()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_inner()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_gamma()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_floor()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_float()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_noexpand()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_det()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dim()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_divisors()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_do()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dsolve()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eval()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_exp()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factorial()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factorpoly()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_hermite()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_hilbert()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_index()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_inv()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_invg()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_multiply()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_number()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_operator()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rank()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_setq()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setq_indexed()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sqrt()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_subst()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_unit()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sym()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_erfc()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_erf()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_print()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dirac()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_denominator()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_degree()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_defint()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_user_function()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_decomp()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cosh()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cos()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_contract()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_conj()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyexpand()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_condense()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cofactor()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_coeff()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clock()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defn()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_equals_a(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_simfac()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rationalize_tensor()
</UL>

<P><STRONG><a name="[1c9]"></a>eval_print()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = eval_print() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printline(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_display()
</UL>

<P><STRONG><a name="[237]"></a>eval_noexpand()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, eval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>

<P><STRONG><a name="[238]"></a>expand_get_AF()</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = expand_get_AF() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_A()
</UL>

<P><STRONG><a name="[239]"></a>expand_get_A()</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = expand_get_A() &rArr; expand_get_AF() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
</UL>

<P><STRONG><a name="[23a]"></a>expand_get_B()</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + In Cycle
<LI>Call Chain = expand_get_B() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
</UL>

<P><STRONG><a name="[23b]"></a>trivial_divide()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = trivial_divide() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
</UL>

<P><STRONG><a name="[23c]"></a>expand_get_CF()</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + In Cycle
<LI>Call Chain = expand_get_CF() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trivial_divide()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
</UL>

<P><STRONG><a name="[23d]"></a>expand_get_C()</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + In Cycle
<LI>Call Chain = expand_get_C() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
</UL>

<P><STRONG><a name="[23e]"></a>remove_negative_exponents()</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + In Cycle
<LI>Call Chain = remove_negative_exponents() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factors(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
</UL>

<P><STRONG><a name="[240]"></a>expand_tensor()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = expand_tensor() &rArr;  expand() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
</UL>

<P><STRONG><a name="[241]"></a>expand()</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + In Cycle
<LI>Call Chain = expand() &rArr;  numerator() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_tensor()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_negative_exponents()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_B()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_A()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_tensor()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expand()
</UL>

<P><STRONG><a name="[202]"></a>eval_expand()</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + In Cycle
<LI>Call Chain = eval_expand() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[243]"></a>test_expand()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, expand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_expand() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[11e]"></a>expcos()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, expcos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = expcos() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expcos()
</UL>

<P><STRONG><a name="[203]"></a>eval_expcos()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, expcos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = eval_expcos() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[244]"></a>test_expcos()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, expcos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_expcos() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[11f]"></a>expsin()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, expsin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = expsin() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expsin()
</UL>

<P><STRONG><a name="[204]"></a>eval_expsin()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, expsin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = eval_expsin() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[245]"></a>test_expsin()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, expsin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_expsin() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[246]"></a>factor_term()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, factor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = factor_term() &rArr; factorpoly() &rArr; yyfactorpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_again()
</UL>

<P><STRONG><a name="[247]"></a>factor_again()</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, factor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = factor_again() &rArr; factor_term() &rArr; factorpoly() &rArr; yyfactorpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all_noexpand(int)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_term()
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factor()
</UL>

<P><STRONG><a name="[249]"></a>factor()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, factor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = factor() &rArr; factorpoly() &rArr; yyfactorpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factor()
</UL>

<P><STRONG><a name="[205]"></a>eval_factor()</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, factor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + In Cycle
<LI>Call Chain = eval_factor() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_again()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1ad]"></a>factor_small_number()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, factor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = factor_small_number() &rArr; push_integer(int) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
</UL>

<P><STRONG><a name="[24b]"></a>test_factor_number()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, factor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_factor_number() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[112]"></a>factorial()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, factorial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = factorial() &rArr; bignum_factorial(int) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_factorial(int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybinomial()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factorial()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
</UL>

<P><STRONG><a name="[24c]"></a>sfac_product_f(U**, int, int)</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, factorial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyexpand()
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product()
</UL>

<P><STRONG><a name="[24d]"></a>sfac_product()</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, factorial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyfactorials()
</UL>

<P><STRONG><a name="[24e]"></a>simplifyfactorials()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, factorial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyfactorials()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product()
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyfactorials()
</UL>

<P><STRONG><a name="[253]"></a>yyfactorpoly()</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, factorpoly.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004 + In Cycle
<LI>Call Chain = yyfactorpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(U*)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_noexpand()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_noexpand()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isfloating(U*)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize_coefficients(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydivpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
</UL>

<P><STRONG><a name="[1f3]"></a>factorpoly()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, factorpoly.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = factorpoly() &rArr; yyfactorpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly(U*, U*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_term()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factorpoly()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots2()
</UL>

<P><STRONG><a name="[259]"></a>test_factorpoly()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, factorpoly.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_factorpoly() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[25b]"></a>push_term_factors(U*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, factors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = push_term_factors(U*) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factors(U*)
</UL>

<P><STRONG><a name="[23f]"></a>factors(U*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, factors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = factors(U*) &rArr; push_term_factors(U*) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_term_factors(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_negative_exponents()
</UL>

<P><STRONG><a name="[25c]"></a>filter_tensor()</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = filter_tensor() &rArr;  filter() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_main()
</UL>

<P><STRONG><a name="[25d]"></a>filter_sum()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = filter_sum() &rArr;  filter() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_main()
</UL>

<P><STRONG><a name="[25e]"></a>filter_main()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = filter_main() &rArr; filter_sum() &rArr;  filter() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_sum()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_tensor()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
</UL>

<P><STRONG><a name="[12f]"></a>filter()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = filter() &rArr; filter_main() &rArr; filter_sum() &rArr;  filter() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_B()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_filter()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_coeff()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_sum()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_tensor()
</UL>

<P><STRONG><a name="[206]"></a>eval_filter()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = eval_filter() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[c3]"></a>find(U*, U*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = find(U*, U*) &rArr;  find(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly(U*, U*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfunction()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_sum()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_product()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_conj()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly_factor(U*, U*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_main()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5()
</UL>

<P><STRONG><a name="[1bb]"></a>yyfloat()</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, float.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = yyfloat() &rArr;  yyfloat() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_float()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_float()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
</UL>

<P><STRONG><a name="[207]"></a>eval_float()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, float.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = eval_float() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[25f]"></a>test_float()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, float.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_float() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[260]"></a>yyfloor()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, floor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = yyfloor() &rArr; add() &rArr; add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yfloor()
</UL>

<P><STRONG><a name="[262]"></a>yfloor()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, floor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = yfloor() &rArr; yyfloor() &rArr; add() &rArr; add_terms(int) &rArr; combine_terms(U**, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_floor()
</UL>

<P><STRONG><a name="[208]"></a>eval_floor()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, floor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = eval_floor() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yfloor()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[263]"></a>test_floor()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, floor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_floor() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[209]"></a>eval_for()</STRONG> (Thumb, 632 bytes, Stack size 40 bytes, for.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = eval_for() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding_and_arglist(U*, U*, U*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arglist(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[266]"></a>gamma()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gamma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = gamma() &rArr; gammaf() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_gamma()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
</UL>

<P><STRONG><a name="[20a]"></a>eval_gamma()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gamma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + In Cycle
<LI>Call Chain = eval_gamma() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[268]"></a>test_gamma()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gamma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_gamma() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[269]"></a>gcd_factor_term()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = gcd_factor_term() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
</UL>

<P><STRONG><a name="[26a]"></a>gcd_term_factor()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = gcd_term_factor() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
</UL>

<P><STRONG><a name="[26b]"></a>gcd_term_term()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + In Cycle
<LI>Call Chain = gcd_term_term() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
</UL>

<P><STRONG><a name="[26c]"></a>gcd_expr(U*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = gcd_expr(U*) &rArr;  gcd() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
</UL>

<P><STRONG><a name="[26d]"></a>gcd_expr_expr()</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + In Cycle
<LI>Call Chain = gcd_expr_expr() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
</UL>

<P><STRONG><a name="[26e]"></a>gcd_main()</STRONG> (Thumb, 990 bytes, Stack size 40 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = gcd_main() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_numbers()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr_expr()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr(U*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_term_term()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_term_factor()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_factor_term()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>

<P><STRONG><a name="[137]"></a>gcd()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = gcd() &rArr; gcd_main() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_gcd()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylcm()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr_expr()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr(U*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_term_term()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_term_factor()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_factor_term()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcm()
</UL>

<P><STRONG><a name="[20b]"></a>eval_gcd()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + In Cycle
<LI>Call Chain = eval_gcd() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[26f]"></a>test_gcd()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_gcd() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[171]"></a>guess()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, guess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = guess() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_leading()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_taylor()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factor()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expand()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_degree()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_decomp()
</UL>

<P><STRONG><a name="[270]"></a>yyhermite2(int)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hermite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = yyhermite2(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
</UL>

<P><STRONG><a name="[271]"></a>yyhermite()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hermite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = yyhermite() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite2(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hermite()
</UL>

<P><STRONG><a name="[183]"></a>hermite()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hermite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = hermite() &rArr; yyhermite() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_hermite()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhermite()
</UL>

<P><STRONG><a name="[272]"></a>test_hermite()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hermite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_hermite() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[1f0]"></a>hilbert()</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hilbert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = hilbert() &rArr; inverse() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_zero_matrix(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_hilbert()
</UL>

<P><STRONG><a name="[1c3]"></a>update_cmd_history(char*)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, history.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_cmd_history(char*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_down_arrow()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_up_arrow()
</UL>

<P><STRONG><a name="[274]"></a>do_up_arrow()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, history.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cmd_history(char*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_curr_cmd(char*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curr_cmd()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[275]"></a>do_down_arrow()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, history.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cmd_history(char*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_curr_cmd(char*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curr_cmd()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[276]"></a>get_cmd_history()</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, history.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d0]"></a>imag()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, imag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = imag() &rArr;  rect() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_imag()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
</UL>

<P><STRONG><a name="[20c]"></a>eval_imag()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, imag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = eval_imag() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[277]"></a>test_imag()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, imag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_imag() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[1ee]"></a>index_function(int)</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, index.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = index_function(int) &rArr; pop_integer() &rArr; restore() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_index()
</UL>

<P><STRONG><a name="[1e1]"></a>set_component(int)</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, index.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = set_component(int) &rArr; pop_integer() &rArr; restore() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setq_indexed()
</UL>

<P><STRONG><a name="[278]"></a>test_index()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, index.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_index() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[127]"></a>defn()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + In Cycle
<LI>Call Chain = defn() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clear()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[279]"></a>init()</STRONG> (Thumb, 2336 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = init() &rArr; defn() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defn()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_symbol(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
</UL>

<P><STRONG><a name="[6f]"></a>inner()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + In Cycle
<LI>Call Chain = inner() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_f()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_inner()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
</UL>

<P><STRONG><a name="[20d]"></a>eval_inner()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + In Cycle
<LI>Call Chain = eval_inner() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[27e]"></a>test_inner()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_inner() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[27f]"></a>integral_of_form()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, integral.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = integral_of_form() &rArr; transform(char**) &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_product()
</UL>

<P><STRONG><a name="[281]"></a>integral_of_product()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, integral.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + In Cycle
<LI>Call Chain = integral_of_product() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_form()
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
</UL>

<P><STRONG><a name="[283]"></a>integral_of_sum()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, integral.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = integral_of_sum() &rArr;  integral() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
</UL>

<P><STRONG><a name="[175]"></a>integral()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, integral.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + In Cycle
<LI>Call Chain = integral() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_sum()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_product()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_form()
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_defint()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_sum()
</UL>

<P><STRONG><a name="[20e]"></a>eval_integral()</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, integral.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + In Cycle
<LI>Call Chain = eval_integral() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[284]"></a>decomp(int)</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, inv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = decomp(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyinvg()
</UL>

<P><STRONG><a name="[285]"></a>yyinvg()</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, inv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = yyinvg() &rArr; decomp(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
</UL>

<P><STRONG><a name="[1ec]"></a>inv()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = inv() &rArr; adj() &rArr; cofactor(U*, int, int, int) &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyinvg()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_inv()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
</UL>

<P><STRONG><a name="[1ea]"></a>invg()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, inv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = invg() &rArr; yyinvg() &rArr; decomp(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyinvg()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_invg()
</UL>

<P><STRONG><a name="[88]"></a>iszero(U*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = iszero(U*) &rArr;  iszero(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly_term(int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_terms(U*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_test()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_not()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_and()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_or()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testeq()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_check()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydegree(U*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycontract()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_f()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_equals_a(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_tensor()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[79]"></a>isnegativenumber(U*)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isnegativenumber(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators_factor(U*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[b0]"></a>isplusone(U*)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isplusone(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
</UL>

<P><STRONG><a name="[287]"></a>isminusone(U*)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isminusone(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__is_radical_number(U*)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoneover(U*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_term(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[fb]"></a>isinteger(U*)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isinteger(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isintegerfactor(U*)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseveninteger(U*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isposint(U*)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[293]"></a>isnonnegativeinteger(U*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isnonnegativeinteger(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isprime()
</UL>

<P><STRONG><a name="[288]"></a>isposint(U*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = isposint(U*) &rArr; isinteger(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly_factor(U*, U*)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots3()
</UL>

<P><STRONG><a name="[289]"></a>ispoly_factor(U*, U*)</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ispoly_factor(U*, U*) &rArr; find(U*, U*) &rArr;  find(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isposint(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly_term(U*, U*)
</UL>

<P><STRONG><a name="[28a]"></a>ispoly_term(U*, U*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ispoly_term(U*, U*) &rArr; ispoly_factor(U*, U*) &rArr; find(U*, U*) &rArr;  find(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly_factor(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly_expr(U*, U*)
</UL>

<P><STRONG><a name="[28b]"></a>ispoly_expr(U*, U*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ispoly_expr(U*, U*) &rArr; ispoly_term(U*, U*) &rArr; ispoly_factor(U*, U*) &rArr; find(U*, U*) &rArr;  find(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly_term(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly(U*, U*)
</UL>

<P><STRONG><a name="[df]"></a>ispoly(U*, U*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ispoly(U*, U*) &rArr; ispoly_expr(U*, U*) &rArr; ispoly_term(U*, U*) &rArr; ispoly_factor(U*, U*) &rArr; find(U*, U*) &rArr;  find(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly_expr(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots3()
</UL>

<P><STRONG><a name="[7b]"></a>isnegativeterm(U*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isnegativeterm(U*) &rArr; isnegativenumber(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegative(U*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_denominator(U*)
</UL>

<P><STRONG><a name="[28c]"></a>isimaginarynumber(U*)</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isimaginarynumber(U*) &rArr; equal(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscomplexnumber(U*)
</UL>

<P><STRONG><a name="[77]"></a>iscomplexnumber(U*)</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iscomplexnumber(U*) &rArr; isimaginarynumber(U*) &rArr; equal(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isimaginarynumber(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[28d]"></a>iseveninteger(U*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iseveninteger(U*) &rArr; isinteger(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[c2]"></a>isnegative(U*)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isnegative(U*) &rArr; isnegativeterm(U*) &rArr; isnegativenumber(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
</UL>

<P><STRONG><a name="[28e]"></a>issymbolic(U*)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, is.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issymbolic(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issymbolic(U*)
</UL>

<P><STRONG><a name="[28f]"></a>isintegerfactor(U*)</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, is.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
</UL>

<P><STRONG><a name="[290]"></a>isoneover(U*)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, is.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
</UL>

<P><STRONG><a name="[107]"></a>isfraction(U*)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isfraction(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number(U*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[c6]"></a>equaln(U*, int)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = equaln(U*, int) &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly_term(int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusoneoversqrttwo(U*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoneoversqrttwo(U*)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
</UL>

<P><STRONG><a name="[c7]"></a>equalq(U*, int, int)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = equalq(U*, int, int) &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoneoversqrttwo(U*)
</UL>

<P><STRONG><a name="[a7]"></a>isoneoversqrttwo(U*)</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = isoneoversqrttwo(U*) &rArr; equalq(U*, int, int) &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalq(U*, int, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusoneoversqrttwo(U*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
</UL>

<P><STRONG><a name="[ab]"></a>isminusoneoversqrttwo(U*)</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = isminusoneoversqrttwo(U*) &rArr; isoneoversqrttwo(U*) &rArr; equalq(U*, int, int) &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoneoversqrttwo(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
</UL>

<P><STRONG><a name="[254]"></a>isfloating(U*)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = isfloating(U*) &rArr;  isfloating(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isfloating(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isfloating(U*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
</UL>

<P><STRONG><a name="[291]"></a>isimaginaryunit(U*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isimaginaryunit(U*) &rArr; equal(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
</UL>

<P><STRONG><a name="[292]"></a>isquarterturn(U*)</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = isquarterturn(U*) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_polar()
</UL>

<P><STRONG><a name="[146]"></a>isnpi(U*)</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, is.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = isnpi(U*) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
</UL>

<P><STRONG><a name="[20f]"></a>eval_isprime()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isprime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + In Cycle
<LI>Call Chain = eval_isprime() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprime(unsigned*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnonnegativeinteger(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[295]"></a>test_isprime()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isprime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_isprime() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[296]"></a>test_integral()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, itest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_integral() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[297]"></a>laguerre2(int)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, laguerre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + In Cycle
<LI>Call Chain = laguerre2(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
</UL>

<P><STRONG><a name="[298]"></a>laguerre()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, laguerre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = laguerre() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre2(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_laguerre()
</UL>

<P><STRONG><a name="[210]"></a>eval_laguerre()</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, laguerre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + In Cycle
<LI>Call Chain = eval_laguerre() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[299]"></a>test_laguerre()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, laguerre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_laguerre() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[29a]"></a>yylcm()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = yylcm() &rArr; gcd() &rArr; gcd_main() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm()
</UL>

<P><STRONG><a name="[25a]"></a>lcm()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = lcm() &rArr; yylcm() &rArr; gcd() &rArr; gcd_main() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylcm()
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize_coefficients(int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_lcm()
</UL>

<P><STRONG><a name="[211]"></a>eval_lcm()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + In Cycle
<LI>Call Chain = eval_lcm() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[29b]"></a>test_lcm()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_lcm() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[29c]"></a>leading()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, leading.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = leading() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_leading()
</UL>

<P><STRONG><a name="[212]"></a>eval_leading()</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, leading.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + In Cycle
<LI>Call Chain = eval_leading() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2a1]"></a>legendre()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, legendre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044<LI>Call Chain = legendre() &rArr; __legendre() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_legendre()
</UL>

<P><STRONG><a name="[213]"></a>eval_legendre()</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, legendre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + In Cycle
<LI>Call Chain = eval_legendre() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;legendre()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2a2]"></a>test_legendre()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, legendre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_legendre() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[7f]"></a>list(int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly_term(int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_operator()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sym()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenvec()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenval()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detg()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_tensor()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dd()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfunction()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_decomp()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_form()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_relation()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_power()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_function_call()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_factor(unsigned*, int)
</UL>

<P><STRONG><a name="[2a3]"></a>yylog()</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = yylog() &rArr;  numerator() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isfraction(U*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logarithm()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logarithm()
</UL>

<P><STRONG><a name="[198]"></a>logarithm()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = logarithm() &rArr; yylog() &rArr;  numerator() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_log()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpower()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
</UL>

<P><STRONG><a name="[214]"></a>eval_log()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + In Cycle
<LI>Call Chain = eval_log() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logarithm()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2a4]"></a>test_log()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_log() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[2a7]"></a>madd(unsigned*, unsigned*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, madd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = madd(unsigned*, unsigned*) &rArr; subf(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addf(unsigned*, unsigned*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subf(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscan(char*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_maddf(int, int, int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2a8]"></a>msub(unsigned*, unsigned*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, madd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = msub(unsigned*, unsigned*) &rArr; subf(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addf(unsigned*, unsigned*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subf(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprimef(unsigned*, unsigned*, int)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msubf(int, int, int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2a9]"></a>test_maddf(int, int, int)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, madd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_maddf(int, int, int) &rArr; madd(unsigned*, unsigned*) &rArr; subf(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;madd(unsigned*, unsigned*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_madd()
</UL>

<P><STRONG><a name="[2ac]"></a>test_madd()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, madd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = test_madd() &rArr; test_maddf(int, int, int) &rArr; madd(unsigned*, unsigned*) &rArr; subf(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_maddf(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[2ad]"></a>test_msubf(int, int, int)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, madd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_msubf(int, int, int) &rArr; msub(unsigned*, unsigned*) &rArr; subf(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msub(unsigned*, unsigned*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msub()
</UL>

<P><STRONG><a name="[2ae]"></a>test_msub()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, madd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = test_msub() &rArr; test_msubf(int, int, int) &rArr; msub(unsigned*, unsigned*) &rArr; subf(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msubf(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[2af]"></a>yymag()</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, mag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = yymag() &rArr;  rect() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_trig()
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
</UL>

<P><STRONG><a name="[12b]"></a>mag()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = mag() &rArr; numerator() &rArr;  numerator() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_mag()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[215]"></a>eval_mag()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + In Cycle
<LI>Call Chain = eval_mag() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2b1]"></a>test_mag()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_mag() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[f1]"></a>mcmp(unsigned*, unsigned*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcmp(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_rationals(U*, U*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mpow()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodf(int, int, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdivf(int, int, int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmulf(int, int, int)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mgcd()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mcmp()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmpint(unsigned*, int)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msubf(int, int, int)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_maddf(int, int, int)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_kth_prime(int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2b2]"></a>mcmpint(unsigned*, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mcmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
</UL>

<P><STRONG><a name="[2b3]"></a>test_mcmp()</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, mcmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
</UL>

<P><STRONG><a name="[109]"></a>mgcd(unsigned*, unsigned*)</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, mgcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = mgcd(unsigned*, unsigned*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mshiftright(unsigned*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set_bit(unsigned*, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msub(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_numbers()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mgcd()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2b6]"></a>test_mgcd()</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mgcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = test_mgcd() &rArr; egcd(unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egcd(unsigned*, unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[2b9]"></a>mini_test()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mini-test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = mini_test() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[2ba]"></a>new_string(char*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = new_string(char*) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_string()
</UL>

<P><STRONG><a name="[a1]"></a>out_of_memory()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = out_of_memory() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
</UL>

<P><STRONG><a name="[273]"></a>push_zero_matrix(int, int)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = push_zero_matrix(int, int) &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_identity_matrix(int)
</UL>

<P><STRONG><a name="[2bb]"></a>push_identity_matrix(int)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, misce.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_zero_matrix(int, int)
</UL>

<P><STRONG><a name="[2bc]"></a>push_cars(U*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, misce.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>

<P><STRONG><a name="[2bd]"></a>peek()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, misce.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printline(U*)
</UL>

<P><STRONG><a name="[2be]"></a>peek2()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, misce.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_lisp(U*)
</UL>

<P><STRONG><a name="[1ab]"></a>sign(int)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misce.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
</UL>

<P><STRONG><a name="[8c]"></a>cmp_expr(U*, U*)</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + In Cycle
<LI>Call Chain = cmp_expr(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_numbers(U*, U*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign(int)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_tensors(U*, U*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_printname(U*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_terms(const void*, const void*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmp(const void*, const void*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmp(const void*, const void*)
</UL>

<P><STRONG><a name="[89]"></a>equal(U*, U*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = equal(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trivial_divide()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lu_decomp(int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydegree(U*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_tensors(U*, U*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isquarterturn(U*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isimaginaryunit(U*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isimaginarynumber(U*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly_factor(U*, U*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp(int)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr_expr()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[113]"></a>lessp(U*, U*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = lessp(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_check_args()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_args()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dd()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydegree(U*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_tensors(U*, U*)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_of_term(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[d8]"></a>length(U*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, misce.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomize()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusoneoversqrttwo(U*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscomplexnumber(U*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dproduct()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnpi(U*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isquarterturn(U*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isimaginarynumber(U*)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr_expr()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nterms(U*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
</UL>

<P><STRONG><a name="[2c3]"></a>unique(U*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, misce.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unique_f(U*)
</UL>

<P><STRONG><a name="[2c4]"></a>ssqrt()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, misce.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
</UL>

<P><STRONG><a name="[138]"></a>yyexpand()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = yyexpand() &rArr; eval() &rArr; eval_cons() &rArr; eval_roots() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
</UL>

<P><STRONG><a name="[120]"></a>exponential()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + In Cycle
<LI>Call Chain = exponential() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_exp()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_polar()
</UL>

<P><STRONG><a name="[29e]"></a>square()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = square() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
</UL>

<P><STRONG><a name="[2c5]"></a>sort_stack(int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sort_stack(int) &rArr; qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots()
</UL>

<P><STRONG><a name="[2c6]"></a>mmodpow(unsigned*, unsigned*, unsigned*)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mmodpow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = mmodpow(unsigned*, unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mshiftright(unsigned*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprimef(unsigned*, unsigned*, int)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodpow()
</UL>

<P><STRONG><a name="[2c7]"></a>test_mmodpow()</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, mmodpow.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmodpow(unsigned*, unsigned*, unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[f0]"></a>mmul(unsigned*, unsigned*)</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mulf(unsigned*, unsigned*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscan(char*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_factorial(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_rationals(U*, U*)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprimef(unsigned*, unsigned*, int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmulf(int, int, int)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmodpow(unsigned*, unsigned*, unsigned*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[f5]"></a>mdiv(unsigned*, unsigned*)</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = mdiv(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ge(unsigned*, unsigned*, int)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subf(unsigned*, unsigned*, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mulf(unsigned*, unsigned*, int, unsigned)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdivf(int, int, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2b8]"></a>mmod(unsigned*, unsigned*)</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ge(unsigned*, unsigned*, int)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subf(unsigned*, unsigned*, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mulf(unsigned*, unsigned*, int, unsigned)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprimef(unsigned*, unsigned*, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodf(int, int, int)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmodpow(unsigned*, unsigned*, unsigned*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egcd(unsigned*, unsigned*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2cc]"></a>mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = mdivrem(unsigned**, unsigned**, unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ge(unsigned*, unsigned*, int)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subf(unsigned*, unsigned*, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mulf(unsigned*, unsigned*, int, unsigned)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_kth_prime(int)
</UL>

<P><STRONG><a name="[2cd]"></a>test_mmul()</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = test_mmul() &rArr; test_mmulf(int, int, int) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmulf(int, int, int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[2cf]"></a>test_mdiv()</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = test_mdiv() &rArr; test_mdivf(int, int, int) &rArr; mdiv(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdivf(int, int, int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[2d1]"></a>test_mmod()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = test_mmod() &rArr; test_mmodf(int, int, int) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodf(int, int, int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[2d3]"></a>mod()</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, mod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = mod() &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_mod()
</UL>

<P><STRONG><a name="[216]"></a>eval_mod()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + In Cycle
<LI>Call Chain = eval_mod() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2d4]"></a>test_mod()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_mod() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[f9]"></a>mpow(unsigned*, unsigned)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mpow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = mpow(unsigned*, unsigned) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_power_number(int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mpow()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
</UL>

<P><STRONG><a name="[2d5]"></a>test_mpow()</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, mpow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = test_mpow() &rArr; mpow(unsigned*, unsigned) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[294]"></a>mprime(unsigned*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mprime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = mprime(unsigned*) &rArr; mprimef(unsigned*, unsigned*, int) &rArr; mmodpow(unsigned*, unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mshiftright(unsigned*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprimef(unsigned*, unsigned*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isprime()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mprime()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2d8]"></a>test_mprime()</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mprime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = test_mprime() &rArr; mprime(unsigned*) &rArr; mprimef(unsigned*, unsigned*, int) &rArr; mmodpow(unsigned*, unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprime(unsigned*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[2d9]"></a>mroot(unsigned*, unsigned)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, mroot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = mroot(unsigned*, unsigned) &rArr; mpow(unsigned*, unsigned) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clr_bit(unsigned*, unsigned)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set_bit(unsigned*, unsigned)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
</UL>

<P><STRONG><a name="[2db]"></a>test_mroot()</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, mroot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = test_mroot() &rArr; mroot(unsigned*, unsigned) &rArr; mpow(unsigned*, unsigned) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[102]"></a>mscan(char*)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = mscan(char*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;madd(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_integer(char*)
</UL>

<P><STRONG><a name="[106]"></a>mstr(unsigned*)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, mstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = mstr(unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divby1billion(unsigned*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number(U*)
</UL>

<P><STRONG><a name="[7d]"></a>multiply_all(int)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + In Cycle
<LI>Call Chain = multiply_all(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all_noexpand(int)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trivial_divide()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dproduct()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_product()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
</UL>

<P><STRONG><a name="[136]"></a>inverse()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = inverse() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctanh()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylcm()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators_factor(U*)
</UL>

<P><STRONG><a name="[d4]"></a>divide()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + In Cycle
<LI>Call Chain = divide() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybinomial()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydivpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_B()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lu_decomp(int)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpower()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_coeff()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre2(int, int)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylcm()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre2(int)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp(int)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr_expr()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcm()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
</UL>

<P><STRONG><a name="[2df]"></a>combine_factors(int)</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = combine_factors(int) &rArr; power() &rArr; yypower() &rArr;  conjugate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
</UL>

<P><STRONG><a name="[2e0]"></a>yymultiply()</STRONG> (Thumb, 1320 bytes, Stack size 40 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372 + In Cycle
<LI>Call Chain = yymultiply() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_factors(int)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_p1()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_p2()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
</UL>

<P><STRONG><a name="[78]"></a>multiply()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380<LI>Call Chain = multiply() &rArr; yymultiply() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_noexpand()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize_coefficients(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydivpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evalpoly()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_negative_exponents()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_multiply()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lu_decomp(int)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpower()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsin()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcos()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtan()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsin()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsinh()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcosh()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtanh()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsinh()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccosh()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctanh()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dabs()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsgn()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhermite()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnpi(U*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyouter()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre2(int, int)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre2(int)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isquarterturn(U*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp(int)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_product()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_f()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite2(int)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr_expr()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_term_term()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_term_factor()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_factor_term()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcm()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_polar()
</UL>

<P><STRONG><a name="[256]"></a>multiply_noexpand()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = multiply_noexpand() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
</UL>

<P><STRONG><a name="[248]"></a>multiply_all_noexpand(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = multiply_all_noexpand(int) &rArr; multiply_all(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_again()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac_term()
</UL>

<P><STRONG><a name="[7c]"></a>reciprocate()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = reciprocate() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize_coefficients(int)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_A()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
</UL>

<P><STRONG><a name="[7a]"></a>negate()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1388<LI>Call Chain = negate() &rArr; multiply() &rArr; yymultiply() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_integer(char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cofactor(U*, int, int, int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_noexpand()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lu_decomp(int)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcos()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_sum()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_expand()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_polar()
</UL>

<P><STRONG><a name="[2e3]"></a>negate_expand()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, multiply.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
</UL>

<P><STRONG><a name="[258]"></a>negate_noexpand()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = negate_noexpand() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
</UL>

<P><STRONG><a name="[2e4]"></a>test_multiply()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_multiply() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[2e5]"></a>divpoly(int)</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, nroots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = divpoly(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
</UL>

<P><STRONG><a name="[2e6]"></a>compute_fa(int)</STRONG> (Thumb, 400 bytes, Stack size 88 bytes, nroots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = compute_fa(int) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
</UL>

<P><STRONG><a name="[2e7]"></a>findroot(int)</STRONG> (Thumb, 1166 bytes, Stack size 104 bytes, nroots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = findroot(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_fa(int)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
</UL>

<P><STRONG><a name="[2e8]"></a>monic(int)</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, nroots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = monic(int) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
</UL>

<P><STRONG><a name="[218]"></a>eval_nroots()</STRONG> (Thumb, 678 bytes, Stack size 64 bytes, nroots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + In Cycle
<LI>Call Chain = eval_nroots() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly(U*, U*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monic(int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly(int)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_stack(int)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2e9]"></a>test_nroots()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nroots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_nroots() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[c4]"></a>numerator()</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, numerator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220 + In Cycle
<LI>Call Chain = numerator() &rArr;  numerator() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_numerator()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
</UL>

<P><STRONG><a name="[219]"></a>eval_numerator()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, numerator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + In Cycle
<LI>Call Chain = eval_numerator() &rArr;  numerator() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2ea]"></a>test_numerator()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, numerator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_numerator() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[2eb]"></a>yyouter()</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = yyouter() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
</UL>

<P><STRONG><a name="[2ec]"></a>outer()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = outer() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyouter()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_outer()
</UL>

<P><STRONG><a name="[21b]"></a>eval_outer()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + In Cycle
<LI>Call Chain = eval_outer() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2ed]"></a>test_outer()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_outer() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[282]"></a>partition()</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, partition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = partition() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_product()
</UL>

<P><STRONG><a name="[13d]"></a>polar()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, polar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = polar() &rArr;  arg() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_polar()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_conj()
</UL>

<P><STRONG><a name="[21c]"></a>eval_polar()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, polar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = eval_polar() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2ee]"></a>test_polar()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, polar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_polar() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[2ef]"></a>push_factor(unsigned*, int)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pollard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = push_factor(unsigned*, int) &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_kth_prime(int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[2f0]"></a>factor_b()</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, pollard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = factor_b() &rArr; mprime(unsigned*) &rArr; mprimef(unsigned*, unsigned*, int) &rArr; mmodpow(unsigned*, unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msub(unsigned*, unsigned*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;madd(unsigned*, unsigned*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprime(unsigned*)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_factor(unsigned*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_a()
</UL>

<P><STRONG><a name="[2f1]"></a>try_kth_prime(int)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, pollard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = try_kth_prime(int) &rArr; mdivrem(unsigned**, unsigned**, unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_factor(unsigned*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_a()
</UL>

<P><STRONG><a name="[2f2]"></a>factor_a()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pollard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = factor_a() &rArr; factor_b() &rArr; mprime(unsigned*) &rArr; mprimef(unsigned*, unsigned*, int) &rArr; mmodpow(unsigned*, unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_kth_prime(int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
</UL>

<P><STRONG><a name="[24a]"></a>factor_number()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pollard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = factor_number() &rArr; factor_a() &rArr; factor_b() &rArr; mprime(unsigned*) &rArr; mprimef(unsigned*, unsigned*, int) &rArr; mmodpow(unsigned*, unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_a()
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor()
</UL>

<P><STRONG><a name="[2f3]"></a>simplify_polar()</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = simplify_polar() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isquarterturn(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[2f4]"></a>multinomial_sum(int, int, int*, int, int)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = multinomial_sum(int, int, int*, int, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
</UL>

<P><STRONG><a name="[2f5]"></a>power_sum(int)</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + In Cycle
<LI>Call Chain = power_sum(int) &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_frame(int)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_frame(int)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[2f8]"></a>yypower()</STRONG> (Thumb, 944 bytes, Stack size 24 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + In Cycle
<LI>Call Chain = yypower() &rArr;  conjugate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscomplexnumber(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseveninteger(U*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpow()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_polar()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
</UL>

<P><STRONG><a name="[71]"></a>power()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = power() &rArr; yypower() &rArr;  conjugate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_negative_exponents()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_B()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_power()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sqrt()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtan()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsin()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtanh()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsinh()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccosh()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctanh()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_coeff()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_factors(int)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssqrt()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;square()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
</UL>

<P><STRONG><a name="[21d]"></a>eval_power()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = eval_power() &rArr;  power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2fc]"></a>test_power()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_power() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[2fd]"></a>prime()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, prime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = prime() &rArr; push_integer(int) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_prime()
</UL>

<P><STRONG><a name="[21e]"></a>eval_prime()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, prime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = eval_prime() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2fe]"></a>print_char(int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = print_char(int) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printline(U*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_index_function(U*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factorial_function(U*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_subexpr(U*)
</UL>

<P><STRONG><a name="[100]"></a>print_str(char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = print_str(char*) &rArr; print_char(int) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number(U*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_double(U*, int)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_lisp(U*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print1(U*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_function_definition(U*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_arg_list(U*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_multiply_sign()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_tensor_inner(U*, int, int*)
</UL>

<P><STRONG><a name="[2ff]"></a>print_subexpr(U*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + In Cycle
<LI>Call Chain = print_subexpr(U*) &rArr;  print_expr(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_index_function(U*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factorial_function(U*)
</UL>

<P><STRONG><a name="[301]"></a>print_factorial_function(U*)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + In Cycle
<LI>Call Chain = print_factorial_function(U*) &rArr;  print_expr(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_subexpr(U*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[302]"></a>print_index_function(U*)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + In Cycle
<LI>Call Chain = print_index_function(U*) &rArr;  print_expr(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_subexpr(U*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[303]"></a>print_tensor_inner(U*, int, int*)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + In Cycle
<LI>Call Chain = print_tensor_inner(U*, int, int*) &rArr;  print_expr(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_tensor_inner(U*, int, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_tensor(U*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_tensor_inner(U*, int, int*)
</UL>

<P><STRONG><a name="[304]"></a>print_tensor(U*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = print_tensor(U*) &rArr; print_tensor_inner(U*, int, int*) &rArr;  print_expr(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_tensor_inner(U*, int, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[305]"></a>print_factor(U*)</STRONG> (Thumb, 1650 bytes, Stack size 32 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = print_factor(U*) &rArr;  print_expr(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isfraction(U*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number(U*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_printname(U*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_tensor(U*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_index_function(U*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factorial_function(U*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_term(U*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[306]"></a>print_multiply_sign()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = print_multiply_sign() &rArr; print_str(char*) &rArr; print_char(int) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_term(U*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
</UL>

<P><STRONG><a name="[307]"></a>print_denom(U*, int)</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1420 + In Cycle
<LI>Call Chain = print_denom(U*, int) &rArr;  print_expr(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isfraction(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
</UL>

<P><STRONG><a name="[308]"></a>is_denominator(U*)</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_denominator(U*) &rArr; isnegativeterm(U*) &rArr; isnegativenumber(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;any_denominators(U*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
</UL>

<P><STRONG><a name="[309]"></a>print_a_over_b(U*)</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1468<LI>Call Chain = print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isplusone(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_denominator(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_multiply_sign()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_term(U*)
</UL>

<P><STRONG><a name="[30a]"></a>any_denominators(U*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = any_denominators(U*) &rArr; is_denominator(U*) &rArr; isnegativeterm(U*) &rArr; isnegativenumber(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_denominator(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_term(U*)
</UL>

<P><STRONG><a name="[30b]"></a>print_term(U*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484<LI>Call Chain = print_term(U*) &rArr; print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;any_denominators(U*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_multiply_sign()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
</UL>

<P><STRONG><a name="[30c]"></a>sign_of_term(U*)</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sign_of_term(U*) &rArr; lessp(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
</UL>

<P><STRONG><a name="[300]"></a>print_expr(U*)</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = print_expr(U*) &rArr; print_term(U*) &rArr; print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_of_term(U*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_term(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(U*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printline(U*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_function_definition(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_tensor_inner(U*, int, int*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_index_function(U*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factorial_function(U*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_subexpr(U*)
</UL>

<P><STRONG><a name="[252]"></a>print(U*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, print.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
</UL>

<P><STRONG><a name="[236]"></a>printline(U*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508<LI>Call Chain = printline(U*) &rArr; print_expr(U*) &rArr; print_term(U*) &rArr; print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_char(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_print()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek()
</UL>

<P><STRONG><a name="[30d]"></a>print_arg_list(U*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_printname(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_function_definition(U*)
</UL>

<P><STRONG><a name="[30e]"></a>print_function_definition(U*)</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_printname(U*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_arg_list(U*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_expr(U*)
</UL>

<P><STRONG><a name="[30f]"></a>print1(U*)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = print1(U*) &rArr;  print1(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number(U*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_printname(U*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print1(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_lisp(U*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print1(U*)
</UL>

<P><STRONG><a name="[2bf]"></a>print_lisp(U*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = print_lisp(U*) &rArr; print1(U*) &rArr;  print1(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str(char*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print1(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek2()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
</UL>

<P><STRONG><a name="[21f]"></a>eval_product()</STRONG> (Thumb, 722 bytes, Stack size 32 bytes, product.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = eval_product() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding_and_arglist(U*, U*, U*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arglist(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[e7]"></a>qadd()</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, qadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = qadd() &rArr; mgcd(unsigned*, unsigned*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;madd(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_numbers()
</UL>

<P><STRONG><a name="[ed]"></a>qdiv()</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, qdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = qdiv() &rArr; mgcd(unsigned*, unsigned*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
</UL>

<P><STRONG><a name="[eb]"></a>qmul()</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, qmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = qmul() &rArr; mgcd(unsigned*, unsigned*) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
</UL>

<P><STRONG><a name="[2f9]"></a>qpow()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, qpow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = qpow() &rArr; qpowf() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[e9]"></a>qsub()</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, qsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgcd(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msub(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract_numbers()
</UL>

<P><STRONG><a name="[312]"></a>quickfactor()</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, quickfactor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = quickfactor() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_small_number()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
</UL>

<P><STRONG><a name="[314]"></a>test_quickfactor()</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, quickfactor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = test_quickfactor() &rArr; quickfactor() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_lisp(U*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[242]"></a>divpoly()</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, quotient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + In Cycle
<LI>Call Chain = divpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_quotient()
</UL>

<P><STRONG><a name="[220]"></a>eval_quotient()</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, quotient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + In Cycle
<LI>Call Chain = eval_quotient() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[315]"></a>test_quotient()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, quotient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_quotient() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[319]"></a>yyrationalize()</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + In Cycle
<LI>Call Chain = yyrationalize() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Condense()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rationalize_tensor()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
</UL>

<P><STRONG><a name="[17a]"></a>rationalize()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196<LI>Call Chain = rationalize() &rArr; yyrationalize() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rationalize()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rationalize_tensor()
</UL>

<P><STRONG><a name="[221]"></a>eval_rationalize()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + In Cycle
<LI>Call Chain = eval_rationalize() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[31c]"></a>test_rationalize()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_rationalize() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[d3]"></a>real()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, real.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + In Cycle
<LI>Call Chain = real() &rArr;  rect() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_real()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
</UL>

<P><STRONG><a name="[222]"></a>eval_real()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, real.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = eval_real() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[31d]"></a>test_real()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, real.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_real() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[d2]"></a>rect()</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244 + In Cycle
<LI>Call Chain = rect() &rArr;  rect() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rect()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
</UL>

<P><STRONG><a name="[223]"></a>eval_rect()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + In Cycle
<LI>Call Chain = eval_rect() &rArr;  rect() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[31e]"></a>test_rect()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_rect() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[322]"></a>roots()</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, roots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = roots() &rArr; roots2() &rArr; factorpoly() &rArr; yyfactorpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_stack(int)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots2()
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
</UL>

<P><STRONG><a name="[224]"></a>eval_roots()</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, roots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084 + In Cycle
<LI>Call Chain = eval_roots() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly(U*, U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[323]"></a>test_roots()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, roots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_roots() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[6c]"></a>stop(char*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, run.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_esc_flag()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symnum(U*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_function(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_component(int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_check()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_setq()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setq_indexed()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_stop()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_symbol(char*)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigen()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_small_number()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding_and_arglist(U*, U*, U*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_user_function()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycontract()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cofactor()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyouter()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly(int)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_printname(U*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egcd(unsigned*, unsigned*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp(int)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_f()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arglist(U*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promote_tensor()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_token_buf(char*, char*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_stack()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_frame(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_frame(int)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_b()
</UL>

<P><STRONG><a name="[325]"></a>check_stack()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, run.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = check_stack() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
</UL>

<P><STRONG><a name="[326]"></a>top_level_eval()</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, run.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = top_level_eval() &rArr; eval() &rArr; eval_cons() &rArr; eval_roots() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symnum(U*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isimaginaryunit(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
</UL>

<P><STRONG><a name="[129]"></a>run(char*)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, run.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532<LI>Call Chain = run(char*) &rArr; printline(U*) &rArr; print_expr(U*) &rArr; print_term(U*) &rArr; print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printline(U*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar(int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan(char*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_stack()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
</UL>

<P><STRONG><a name="[32a]"></a>echo_input(char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, run.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
</UL>

<P><STRONG><a name="[85]"></a>check_esc_flag()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, run.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = check_esc_flag() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>

<P><STRONG><a name="[32b]"></a>update_token_buf(char*, char*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = update_token_buf(char*, char*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token()
</UL>

<P><STRONG><a name="[32c]"></a>error(char*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = error(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_subexpr()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_symbol()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_function_call()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token()
</UL>

<P><STRONG><a name="[32d]"></a>get_token()</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = get_token() &rArr; error(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_token_buf(char*, char*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>

<P><STRONG><a name="[32f]"></a>get_next_token()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = get_next_token() &rArr; get_token() &rArr; error(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan(char*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_meta(char*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_relation()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_power()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_subexpr()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_symbol()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_function_call()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_string()
</UL>

<P><STRONG><a name="[330]"></a>scan_string()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = scan_string() &rArr; get_next_token() &rArr; get_token() &rArr; error(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_string(char*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
</UL>

<P><STRONG><a name="[331]"></a>scan_function_call()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = scan_function_call() &rArr;  scan_stmt() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_symbol(char*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
</UL>

<P><STRONG><a name="[333]"></a>scan_symbol()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = scan_symbol() &rArr; get_next_token() &rArr; get_token() &rArr; error(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_symbol(char*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(char*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
</UL>

<P><STRONG><a name="[334]"></a>build_tensor(int)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = build_tensor(int) &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_subexpr()
</UL>

<P><STRONG><a name="[335]"></a>scan_subexpr()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = scan_subexpr() &rArr;  scan_stmt() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_tensor(int)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
</UL>

<P><STRONG><a name="[336]"></a>scan_factor()</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + In Cycle
<LI>Call Chain = scan_factor() &rArr;  scan_expression() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_float(char*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_integer(char*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_subexpr()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_symbol()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_function_call()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_string()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_power()
</UL>

<P><STRONG><a name="[338]"></a>scan_power()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + In Cycle
<LI>Call Chain = scan_power() &rArr;  scan_power() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_power()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_power()
</UL>

<P><STRONG><a name="[33a]"></a>is_factor()</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
</UL>

<P><STRONG><a name="[339]"></a>scan_term()</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + In Cycle
<LI>Call Chain = scan_term() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_factor()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_power()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
</UL>

<P><STRONG><a name="[337]"></a>scan_expression()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + In Cycle
<LI>Call Chain = scan_expression() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_relation()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
</UL>

<P><STRONG><a name="[33b]"></a>scan_relation()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = scan_relation() &rArr; scan_expression() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
</UL>

<P><STRONG><a name="[332]"></a>scan_stmt()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = scan_stmt() &rArr; scan_relation() &rArr; scan_expression() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_relation()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan(char*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_meta(char*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_subexpr()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_function_call()
</UL>

<P><STRONG><a name="[1b7]"></a>scan(char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = scan(char*) &rArr; scan_stmt() &rArr; scan_relation() &rArr; scan_expression() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defn()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
</UL>

<P><STRONG><a name="[33c]"></a>scan_meta(char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = scan_meta(char*) &rArr; scan_stmt() &rArr; scan_relation() &rArr; scan_expression() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_token()
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
</UL>

<P><STRONG><a name="[33d]"></a>test_scan()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_scan() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[2aa]"></a>logout(char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, selftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = logout(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mprime()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mpow()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmod()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdiv()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmul()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodf(int, int, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdivf(int, int, int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmulf(int, int, int)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodpow()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mgcd()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mcmp()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msub()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msubf(int, int, int)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_madd()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_maddf(int, int, int)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
</UL>

<P><STRONG><a name="[2ab]"></a>errout()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, selftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = errout() &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mprime()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mpow()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmod()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdiv()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmul()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodf(int, int, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdivf(int, int, int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmulf(int, int, int)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodpow()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mgcd()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mcmp()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msub()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msubf(int, int, int)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_madd()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_maddf(int, int, int)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
</UL>

<P><STRONG><a name="[83]"></a>test(char*, char**, int)</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, selftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_circexp()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_choose()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ceiling()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_binomial()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bake()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arg()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arctanh()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arctan()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arcsinh()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arcsin()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arccosh()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arccos()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adj()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_abs()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_factorpoly()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_factor_number()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_expsin()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_expcos()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_expand()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_erfc()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_erf()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eigen()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_divisors()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dirac()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_derivative()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_denominator()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_defint()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cosh()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cos()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_contract()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_condense()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cofactor()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_coeff()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clock()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_polar()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_outer()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_numerator()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nroots()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multiply()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mod()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_test()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mag()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_log()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_legendre()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcm()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_laguerre()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_integral()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_isprime()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_inner()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_index()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_imag()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hermite()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gcd()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gamma()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_floor()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_float()
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_zero()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_test()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tanh()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sinh()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tan()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sin()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sgn()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_transpose()
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_simplify()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tensor()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_taylor()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_roots()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rect()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_real()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rationalize()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quotient()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power()
</UL>

<P><STRONG><a name="[33e]"></a>test_low_level()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, selftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + In Cycle
<LI>Call Chain = test_low_level() &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mprime()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mpow()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmod()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdiv()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmul()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mgcd()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msub()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_madd()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[329]"></a>selftest()</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, selftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = selftest() &rArr; test_low_level() &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_circexp()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_choose()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ceiling()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_binomial()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bake()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arg()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arctanh()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arctan()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arcsinh()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arcsin()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arccosh()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arccos()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adj()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_abs()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_factorpoly()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_factor_number()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_expsin()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_expcos()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_expand()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_erfc()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_erf()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eigen()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_divisors()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dirac()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_derivative()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_denominator()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_defint()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cosh()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cos()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_contract()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_condense()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cofactor()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_coeff()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clock()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_polar()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_outer()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_numerator()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nroots()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multiply()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mod()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_test()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mag()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_log()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_legendre()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcm()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_laguerre()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_integral()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_isprime()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_inner()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_index()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_imag()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hermite()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gcd()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gamma()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_floor()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_float()
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_zero()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_test()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tanh()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sinh()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tan()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sin()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sgn()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_transpose()
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_simplify()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tensor()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_taylor()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_roots()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rect()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_real()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rationalize()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quotient()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
</UL>

<P><STRONG><a name="[34a]"></a>yysgn()</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, sgn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + In Cycle
<LI>Call Chain = yysgn() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscomplexnumber(U*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn()
</UL>

<P><STRONG><a name="[187]"></a>sgn()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sgn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = sgn() &rArr; yysgn() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sgn()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dabs()
</UL>

<P><STRONG><a name="[225]"></a>eval_sgn()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sgn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + In Cycle
<LI>Call Chain = eval_sgn() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[341]"></a>test_sgn()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sgn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_sgn() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[34d]"></a>simfac()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, simfac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = simfac() &rArr; simfac_term() &rArr; yysimfac(int) &rArr; subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac_term()
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_simfac()
</UL>

<P><STRONG><a name="[34e]"></a>eval_simfac()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, simfac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac()
</UL>

<P><STRONG><a name="[354]"></a>simplify_main()</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + In Cycle
<LI>Call Chain = simplify_main() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f2()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_tensor()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f9()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count(U*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
</UL>

<P><STRONG><a name="[72]"></a>simplify()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = simplify() &rArr; simplify_main() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_simplify()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_tensor()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f9()
</UL>

<P><STRONG><a name="[226]"></a>eval_simplify()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + In Cycle
<LI>Call Chain = eval_simplify() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[2b0]"></a>simplify_trig()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = simplify_trig() &rArr; f5() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5()
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
</UL>

<P><STRONG><a name="[349]"></a>test_simplify()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_simplify() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[358]"></a>sine_of_angle()</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, sin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = sine_of_angle() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegative(U*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
</UL>

<P><STRONG><a name="[359]"></a>sine_of_angle_sum()</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + In Cycle
<LI>Call Chain = sine_of_angle_sum() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnpi(U*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
</UL>

<P><STRONG><a name="[148]"></a>sine()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = sine() &rArr; sine_of_angle_sum() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sin()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcos()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[227]"></a>eval_sin()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + In Cycle
<LI>Call Chain = eval_sin() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[345]"></a>test_sin()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_sin() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[35a]"></a>yysinh()</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sinh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = yysinh() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ysinh()
</UL>

<P><STRONG><a name="[18d]"></a>ysinh()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sinh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = ysinh() &rArr; yysinh() &rArr; list(int) &rArr; cons() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sinh()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcosh()
</UL>

<P><STRONG><a name="[228]"></a>eval_sinh()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sinh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = eval_sinh() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ysinh()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[347]"></a>test_sinh()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sinh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_sinh() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[6d]"></a>push(U*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_circexp()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_choose()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_ceiling()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_binomial()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybinomial()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_factorial(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_numbers()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_integer(char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_power_number(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly_term(int)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_atomize()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomize()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arg()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arctanh()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arctan()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arcsinh()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arcsin()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arccosh()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_arccos()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cofactor(U*, int, int, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_adj()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_plus_tensor()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_add()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_terms(U*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_abs()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval_tensor()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize_coefficients(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydivpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evalpoly()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyfactorials()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_again()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_term()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_tensor()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_negative_exponents()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_CF()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trivial_divide()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_B()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_A()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_AF()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_zero()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_test()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sinh()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rect()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_real()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_imag()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tan()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sin()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sgn()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_not()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_mod()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_mag()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_log()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_lcm()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_gcd()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_and()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_or()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rationalize()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_function(int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_transpose()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_numerator()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_component(int)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_simplify()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_quotient()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_legendre()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_laguerre()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_leading()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isprime()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testeq()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tensor()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_taylor()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_filter()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factor()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expsin()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expcos()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expand()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_prime()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_power()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_polar()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_outer()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_inner()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_gamma()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_floor()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_float()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_binding()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_check()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_det()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dim()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_divisors()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_do()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dsolve()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eval()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_exp()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factorial()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factorpoly()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_hermite()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_hilbert()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_index()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_inv()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_invg()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_multiply()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_number()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_operator()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_quote()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rank()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_setq()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setq_indexed()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sqrt()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_subst()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_unit()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sym()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_erfc()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_erf()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_print()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_draw()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenvec()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenval()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigen()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan(char*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dirac()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detg()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydetg()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lu_decomp(int)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_tensor()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_scalar()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_tensor()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar_1()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsum()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dproduct()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpower()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dd()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsin()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcos()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtan()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsin()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccos()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctan()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsinh()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcosh()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtanh()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darcsinh()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darccosh()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darctanh()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dabs()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsgn()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhermite()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative_of_integral()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfunction()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_denominator()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_degree()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_defint()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_user_function()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_decomp()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_sum()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_product()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cosh()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnpi(U*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cos()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_contract()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycontract()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_conj()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_condense()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cofactor()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_coeff()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clock()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clear()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyouter()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_factors(int)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_cars(U*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_string(char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_trig()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre2(int, int)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylcm()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre2(int)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isquarterturn(U*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyinvg()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp(int)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_sum()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_product()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_form()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_f()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_zero_matrix(int, int)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite2(int)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr_expr()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr(U*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_term_term()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_term_factor()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_factor_term()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_main()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_sum()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_tensor()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_term_factors(U*)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args_tensor()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_equals_a(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promote_tensor()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dupl()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f2()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_tensor()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f9()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_simfac()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac_term()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_meta(char*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_tensor(int)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_symbol()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_function_call()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots2()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots3()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rationalize_tensor()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators_factor(U*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcm()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multinomial_sum(int, int, int*, int, int)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_polar()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_factor(unsigned*, int)
</UL>

<P><STRONG><a name="[76]"></a>pop()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = pop() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybinomial()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_float()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_double()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_numbers()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_power_number(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract_numbers()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_atomize()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_plus_tensor()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_numbers()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_add()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all(int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize_coefficients(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yydivpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evalpoly()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyfactorials()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfac_product_f(U**, int, int)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_again()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_term()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_tensor()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_negative_exponents()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_C()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trivial_divide()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_B()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_get_A()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_test()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_not()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_and()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_or()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_quotient()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_legendre()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_laguerre()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_integral()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_leading()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isprime()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testeq()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tensor()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_taylor()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_factor()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_expand()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_roots()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_check()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_dim()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_do()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_number()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_rank()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_setq()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setq_indexed()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_print()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detg()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lu_decomp(int)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_tensor()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_scalar()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_tensor()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dd()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_degree()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_defint()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_user_function()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_decomp()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp_sum()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle_sum()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycontract()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_conj()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycondense()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cofactor()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_coeff()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defn()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyouter()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_factors(int)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_trig()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre2(int, int)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylcm()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre2(int)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp(int)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_product()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_form()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_f()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite2(int)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_main()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_expr_expr()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_tensor()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args_tensor()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_equals_a(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promote_tensor()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dupl()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle_sum()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f2()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_tensor()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f9()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac_term()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots2()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots3()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rationalize_tensor()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators_factor(U*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcm()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
</UL>

<P><STRONG><a name="[2f6]"></a>push_frame(int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = push_frame(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
</UL>

<P><STRONG><a name="[2f7]"></a>pop_frame(int)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = pop_frame(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
</UL>

<P><STRONG><a name="[75]"></a>save()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = save() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceiling()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binomial()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_factorial(int)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_double()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_numbers()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_integer(char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_power_number(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract_numbers()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_plus_tensor()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_numbers()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyfactorials()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_again()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_term()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_function(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_component(int)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerf()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_small_number()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detg()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logarithm()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hermite()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ysinh()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirac()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ycosh()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contract()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Condense()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unique(U*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_string(char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_trig()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;legendre()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yfloor()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promote_tensor()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tangent()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac_term()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_tensor(int)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots2()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots3()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcm()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpow()
</UL>

<P><STRONG><a name="[80]"></a>restore()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = restore() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expsin()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expcos()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceiling()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binomial()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmul()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_factorial(int)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_double()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd_numbers()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_integer(char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_power_number(int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate_number()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract_numbers()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;real()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imag()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numerator()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_plus_tensor()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_numbers()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_all(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyfactorials()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_again()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_term()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_function(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_component(int)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerf()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsolve()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_small_number()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__factor_add()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detg()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logarithm()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hermite()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ysinh()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirac()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ycosh()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contract()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polar()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Condense()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockform()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unique(U*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_string(char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_trig()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymag()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;legendre()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leading()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_times_scalar()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_times_tensor()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yfloor()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promote_tensor()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tangent()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac_term()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_tensor(int)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots2()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots3()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcm()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_a_over_b(U*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_denom(U*, int)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpow()
</UL>

<P><STRONG><a name="[db]"></a>swap()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = swap() &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bake_poly_term(int)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_relation()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_power()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_factor(unsigned*, int)
</UL>

<P><STRONG><a name="[35c]"></a>dupl()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>

<P><STRONG><a name="[130]"></a>subst()</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, subst.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = subst() &rArr;  subst() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cons()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conjugate()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eval()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_subst()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distilly()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_scalar_scalar()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_defint()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
</UL>

<P><STRONG><a name="[229]"></a>eval_sum()</STRONG> (Thumb, 722 bytes, Stack size 32 bytes, sum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = eval_sum() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding_and_arglist(U*, U*, U*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arglist(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[27a]"></a>std_symbol(char*, int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, symbol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[1bd]"></a>usr_symbol(char*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = usr_symbol(char*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigen()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_symbol()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_function_call()
</UL>

<P><STRONG><a name="[2c0]"></a>get_printname(U*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = get_printname(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print1(U*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_function_definition(U*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_arg_list(U*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_factor(U*)
</UL>

<P><STRONG><a name="[1be]"></a>set_binding(U*, U*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = set_binding(U*, U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_setq()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setq_indexed()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigen()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_equals_a(int)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
</UL>

<P><STRONG><a name="[1db]"></a>get_binding(U*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = get_binding(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_binding()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sym()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_function_definition(U*)
</UL>

<P><STRONG><a name="[173]"></a>set_binding_and_arglist(U*, U*, U*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = set_binding_and_arglist(U*, U*, U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_user_function()
</UL>

<P><STRONG><a name="[264]"></a>get_arglist(U*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = get_arglist(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sum()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_product()
</UL>

<P><STRONG><a name="[1da]"></a>symnum(U*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = symnum(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_sym()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
</UL>

<P><STRONG><a name="[7e]"></a>push_symbol(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = push_symbol(int) &rArr; push(U*) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exponential()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyarg()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absval()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_number()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_for()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilbert()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_operator()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenvec()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenval()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detg()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_tensor_tensor()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dd()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derf()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derfc()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfunction()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_user_function()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laguerre()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_form()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyhermite()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_stmt()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_relation()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_expression()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_term()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_power()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_factor()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_level_eval()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickpower()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_tensor()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_factor(unsigned*, int)
</UL>

<P><STRONG><a name="[126]"></a>clear_symbols()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, symbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clear_symbols()
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_clear()
</UL>

<P><STRONG><a name="[35d]"></a>yytangent()</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, tan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + In Cycle
<LI>Call Chain = yytangent() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegative(U*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tangent()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tangent()
</UL>

<P><STRONG><a name="[35e]"></a>tangent()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = tangent() &rArr; yytangent() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tan()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
</UL>

<P><STRONG><a name="[22a]"></a>eval_tan()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + In Cycle
<LI>Call Chain = eval_tan() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tangent()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[346]"></a>test_tan()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_tan() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[22b]"></a>eval_tanh()</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tanh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = eval_tanh() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[348]"></a>test_tanh()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tanh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_tanh() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[361]"></a>taylor()</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, taylor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + In Cycle
<LI>Call Chain = taylor() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_taylor()
</UL>

<P><STRONG><a name="[22c]"></a>eval_taylor()</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, taylor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + In Cycle
<LI>Call Chain = eval_taylor() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guess()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taylor()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[342]"></a>test_taylor()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, taylor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_taylor() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[235]"></a>eval_tensor()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + In Cycle
<LI>Call Chain = eval_tensor() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promote_tensor()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>

<P><STRONG><a name="[86]"></a>tensor_plus_tensor()</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = tensor_plus_tensor() &rArr;  add() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_terms(U**, int)
</UL>

<P><STRONG><a name="[27c]"></a>tensor_times_scalar()</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = tensor_times_scalar() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
</UL>

<P><STRONG><a name="[27d]"></a>scalar_times_tensor()</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = scalar_times_tensor() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outer()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
</UL>

<P><STRONG><a name="[4c2]"></a>is_square_matrix(U*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tensor.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>d_tensor_tensor()</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = d_tensor_tensor() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>

<P><STRONG><a name="[19f]"></a>d_scalar_tensor()</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = d_scalar_tensor() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>

<P><STRONG><a name="[19d]"></a>d_tensor_scalar()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + In Cycle
<LI>Call Chain = d_tensor_scalar() &rArr;  derivative() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>

<P><STRONG><a name="[2c1]"></a>compare_tensors(U*, U*)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = compare_tensors(U*, U*) &rArr; lessp(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
</UL>

<P><STRONG><a name="[2fa]"></a>power_tensor()</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = power_tensor() &rArr; inv() &rArr; adj() &rArr; cofactor(U*, int, int, int) &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
</UL>

<P><STRONG><a name="[121]"></a>copy_tensor()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = copy_tensor() &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circexp()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_tensor()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args_tensor()
</UL>

<P><STRONG><a name="[340]"></a>test_tensor()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_tensor() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[22d]"></a>eval_test()</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = eval_test() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[1fd]"></a>eval_testeq()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = eval_testeq() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
</UL>

<P><STRONG><a name="[363]"></a>cmp_args()</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = cmp_args() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testlt()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testle()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testgt()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_testge()
</UL>

<P><STRONG><a name="[22e]"></a>eval_testge()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = eval_testge() &rArr; cmp_args() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[22f]"></a>eval_testgt()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = eval_testgt() &rArr; cmp_args() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[230]"></a>eval_testle()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = eval_testle() &rArr; cmp_args() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[231]"></a>eval_testlt()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = eval_testlt() &rArr; cmp_args() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[217]"></a>eval_not()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = eval_not() &rArr; eval_predicate() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[201]"></a>eval_and()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = eval_and() &rArr; eval_predicate() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[21a]"></a>eval_or()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = eval_or() &rArr; eval_predicate() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_predicate()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[33f]"></a>test_test()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_test() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[364]"></a>f_equals_a(int)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, transform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = f_equals_a(int) &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform(char**)
</UL>

<P><STRONG><a name="[280]"></a>transform(char**)</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, transform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + In Cycle
<LI>Call Chain = transform(char**) &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polyform()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binding(U*, U*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decomp()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_equals_a(int)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_meta(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral_of_form()
</UL>

<P><STRONG><a name="[365]"></a>transpose()</STRONG> (Thumb, 408 bytes, Stack size 232 bytes, transpose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = transpose() &rArr; pop_integer() &rArr; restore() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_transpose()
</UL>

<P><STRONG><a name="[232]"></a>eval_transpose()</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, transpose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + In Cycle
<LI>Call Chain = eval_transpose() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[343]"></a>test_transpose()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, transpose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_transpose() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[366]"></a>rewrite_args_tensor()</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, userfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = rewrite_args_tensor() &rArr;  rewrite_args() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
</UL>

<P><STRONG><a name="[367]"></a>rewrite_args()</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, userfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + In Cycle
<LI>Call Chain = rewrite_args() &rArr;  rewrite_args() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args_tensor()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_user_function()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args_tensor()
</UL>

<P><STRONG><a name="[234]"></a>eval_user_function()</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, userfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + In Cycle
<LI>Call Chain = eval_user_function() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binding(U*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_derivative()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_arglist(U*)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_args()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[233]"></a>eval_zero()</STRONG> (Thumb, 162 bytes, Stack size 128 bytes, zero.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + In Cycle
<LI>Call Chain = eval_zero() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_cons()
</UL>

<P><STRONG><a name="[344]"></a>test_zero()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zero.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = test_zero() &rArr; test(char*, char**, int) &rArr;  run(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[368]"></a>disk_initialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[384]"></a>disk_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[36a]"></a>disk_read</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_read &rArr; SD_ReadMultiBlocks &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[36e]"></a>disk_write</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[374]"></a>disk_ioctl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[386]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[37a]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[375]"></a>get_fat</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[376]"></a>put_fat</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[425]"></a>f_mount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_sd
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_read
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_new
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fs_init
</UL>

<P><STRONG><a name="[385]"></a>f_open</STRONG> (Thumb, 306 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_sd
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_read
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_new
</UL>

<P><STRONG><a name="[387]"></a>f_read</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_sd
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_read
</UL>

<P><STRONG><a name="[389]"></a>f_write</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_new
</UL>

<P><STRONG><a name="[38a]"></a>f_sync</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[38b]"></a>f_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_sd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_new
</UL>

<P><STRONG><a name="[38c]"></a>f_lseek</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_sd
</UL>

<P><STRONG><a name="[38d]"></a>f_opendir</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[38e]"></a>f_readdir</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[390]"></a>f_stat</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[391]"></a>f_getfree</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[392]"></a>f_truncate</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[393]"></a>f_unlink</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[394]"></a>f_mkdir</STRONG> (Thumb, 398 bytes, Stack size 104 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>

<P><STRONG><a name="[395]"></a>f_chmod</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[396]"></a>f_utime</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[397]"></a>f_rename</STRONG> (Thumb, 256 bytes, Stack size 120 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>

<P><STRONG><a name="[67]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))

<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d6]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_NVIC_Configuration
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_TIMConfig
</UL>

<P><STRONG><a name="[3d3]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_NVIC_Configuration
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_EnableUSARTIRQ
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_DisableUSARTIRQ
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_TIMConfig
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_EXTIConfig
</UL>

<P><STRONG><a name="[4c3]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[4c4]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>ADC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcDeInit
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcInit
</UL>

<P><STRONG><a name="[413]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcInit
</UL>

<P><STRONG><a name="[4c6]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>ADC_CommonInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcInit
</UL>

<P><STRONG><a name="[4c7]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcDeInit
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcInit
</UL>

<P><STRONG><a name="[4c8]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
</UL>

<P><STRONG><a name="[4cb]"></a>ADC_VBATCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
</UL>

<P><STRONG><a name="[419]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
</UL>

<P><STRONG><a name="[4cc]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
</UL>

<P><STRONG><a name="[4d1]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d4]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d5]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4da]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4db]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>ADC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
</UL>

<P><STRONG><a name="[4e0]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>ADC_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_EnableDMA
</UL>

<P><STRONG><a name="[405]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_EnableDMA
</UL>

<P><STRONG><a name="[4e3]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_DisableDMA
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_EnableDMA
</UL>

<P><STRONG><a name="[4e4]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[4e5]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4ec]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>DMA_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[432]"></a>DMA_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[4ee]"></a>DMA_GetITStatus</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_EXTIConfig
</UL>

<P><STRONG><a name="[4f1]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[471]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[4f5]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
</UL>

<P><STRONG><a name="[4f6]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
</UL>

<P><STRONG><a name="[4f7]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>FSMC_NANDInit</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[4fa]"></a>FSMC_NANDCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>FSMC_GetECC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[4fd]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[4ff]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[500]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[501]"></a>FSMC_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[502]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[503]"></a>FSMC_ClearFlag</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[504]"></a>FSMC_GetITStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[505]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>GPIO_DeInit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[3ce]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Config
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Config
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[506]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[507]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[508]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[509]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[50b]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rst
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
</UL>

<P><STRONG><a name="[461]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rst
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_StartReadSequence
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
</UL>

<P><STRONG><a name="[50c]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[50d]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[50e]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AF_FSMC_Config
</UL>

<P><STRONG><a name="[3fc]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fd]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fe]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[473]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[400]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50f]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[3e7]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[510]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[511]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_EnterStandbyMode
</UL>

<P><STRONG><a name="[512]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[513]"></a>PWR_MainRegulatorModeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[514]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[515]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[516]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[517]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[518]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[519]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[51a]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[39e]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[51b]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[51c]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[51d]"></a>RCC_LSEConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[51e]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[51f]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[520]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[521]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[522]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[523]"></a>RCC_MCO1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[524]"></a>RCC_MCO2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[525]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[526]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[527]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[528]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[529]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetCPUFreq
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[422]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[423]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[52a]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[52b]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_EnableDMA
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Config
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Config
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[52c]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[3d5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_EnterStopMode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_EnterStandbyMode
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_TIMConfig
</UL>

<P><STRONG><a name="[3d0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcDeInit
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcInit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_EXTIConfig
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[39b]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[52d]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[52e]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[399]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>

<P><STRONG><a name="[52f]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[530]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[531]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[532]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[533]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[534]"></a>RCC_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[535]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>RCC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[3a1]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[3a0]"></a>RTC_DeInit</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[3a4]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[3a3]"></a>RTC_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[538]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3a5]"></a>RTC_RefClockCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[539]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>RTC_SetTime</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[53a]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>RTC_GetTime</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_main
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
</UL>

<P><STRONG><a name="[53b]"></a>RTC_GetSubSecond</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>RTC_SetDate</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[53c]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>RTC_GetDate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_main
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
</UL>

<P><STRONG><a name="[3ac]"></a>RTC_SetAlarm</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[53d]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>RTC_GetAlarm</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[53e]"></a>RTC_AlarmCmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[540]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[541]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[544]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[545]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[546]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[547]"></a>RTC_OutputConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[3af]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[548]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[549]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54a]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54b]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[54c]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54d]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54e]"></a>RTC_TamperCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54f]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[550]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[551]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[552]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[553]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3f8]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[554]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[555]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[556]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[557]"></a>RTC_ITConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[558]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[559]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[55a]"></a>RTC_GetITStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[55b]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>SDIO_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
</UL>

<P><STRONG><a name="[43d]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[55c]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[42d]"></a>SDIO_SetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[441]"></a>SDIO_GetPowerState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[43b]"></a>SDIO_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
</UL>

<P><STRONG><a name="[55d]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[438]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[439]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[44a]"></a>SDIO_DataConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[55e]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[55f]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[44f]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[560]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[561]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[562]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[563]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[564]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[565]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[566]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[567]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[568]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>SDIO_DMACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>

<P><STRONG><a name="[450]"></a>SDIO_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[444]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[437]"></a>SDIO_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[456]"></a>SDIO_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[457]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[3b3]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[45a]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[569]"></a>I2S_Init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[56a]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[56b]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[56c]"></a>I2S_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[56d]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[56e]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[56f]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[570]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[571]"></a>SPI_TIModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[572]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[45e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[573]"></a>SPI_CalculateCRC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[574]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[575]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[576]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[577]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[578]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[45d]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[579]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[57a]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[57b]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>SYSCFG_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[57c]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_EXTIConfig
</UL>

<P><STRONG><a name="[57d]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[57e]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[57f]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>TIM_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[3d7]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_TIMConfig
</UL>

<P><STRONG><a name="[580]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_TIMConfig
</UL>

<P><STRONG><a name="[581]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[582]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[583]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[584]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[585]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[586]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[587]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[588]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[589]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58a]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_TIMConfig
</UL>

<P><STRONG><a name="[58b]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58c]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58d]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58e]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58f]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[590]"></a>TIM_SelectOCxM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[591]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[592]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[593]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[594]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[595]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[596]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[597]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[598]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[599]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59a]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59b]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59c]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59d]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59e]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59f]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a0]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a1]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a2]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a3]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a4]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a5]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a6]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a7]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a8]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a9]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5aa]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5ab]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5ac]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5ad]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[3bc]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[3bb]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[3b9]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[3b6]"></a>TIM_ICInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[5ae]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[5af]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b0]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b1]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b2]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b3]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b4]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b5]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b6]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b7]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_TIMConfig
</UL>

<P><STRONG><a name="[5b8]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5b9]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_TIMConfig
</UL>

<P><STRONG><a name="[472]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[474]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[5ba]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5bb]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5bc]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5bd]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[3be]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[3c0]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[3c2]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[3c1]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[3c3]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[5be]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5bf]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c0]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c1]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c2]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c3]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>USART_DeInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[3c5]"></a>USART_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[5c4]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5c5]"></a>USART_ClockInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5c6]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[489]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[5c7]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5c8]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5c9]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[48a]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutCh
</UL>

<P><STRONG><a name="[477]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5ca]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5cb]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5cc]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5cd]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5ce]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5cf]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5d0]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5d1]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5d2]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5d3]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5d4]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5d5]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_DisableDMA
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_EnableDMA
</UL>

<P><STRONG><a name="[488]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[476]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutCh
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5d6]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5d7]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_WaitCh
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetCh
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_RecData
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3c7]"></a>print</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, g2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = print &rArr; LCD_DispNum_5X7 &rArr; LCD_Display_ASCII_5X7_Chr &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispNum_5X7
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
</UL>

<P><STRONG><a name="[3cb]"></a>add</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, g2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
</UL>

<P><STRONG><a name="[1c6]"></a>G2048_main</STRONG> (Thumb, 674 bytes, Stack size 40 bytes, g2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = G2048_main &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispNum_5X7
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
</UL>

<P><STRONG><a name="[3cc]"></a>KBD_Config</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>

<P><STRONG><a name="[3cf]"></a>KBD_EXTIConfig</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>

<P><STRONG><a name="[3d4]"></a>KBD_TIMConfig</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[3dd]"></a>DelayUs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Scan
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3dc]"></a>KBD_Scan</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KBD_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>WaitForKey</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, key.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitKey()
</UL>

<P><STRONG><a name="[164]"></a>GetKey</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_main
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_main
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About_main
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForCertainKey
</UL>

<P><STRONG><a name="[3df]"></a>WaitForCertainKey</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitForCertainKey &rArr; GetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
</UL>

<P><STRONG><a name="[3e0]"></a>NVIC_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[3f1]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rst
</UL>

<P><STRONG><a name="[46c]"></a>TimingDelay_Decrement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3e1]"></a>About_main</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = About_main &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
</UL>

<P><STRONG><a name="[3e2]"></a>Info_main</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = Info_main &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
</UL>

<P><STRONG><a name="[3e5]"></a>Contrast_main</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = Contrast_main &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBrightness
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
</UL>

<P><STRONG><a name="[3ea]"></a>Diag_main</STRONG> (Thumb, 878 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = Diag_main &rArr; Contrast_main &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDat
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusSet
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForCertainKey
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispNum_5X7
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
</UL>

<P><STRONG><a name="[3ee]"></a>UI_ShowDateTime</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = UI_ShowDateTime &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispNum_5X7
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_main
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
</UL>

<P><STRONG><a name="[3ef]"></a>SetTime_main</STRONG> (Thumb, 596 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = SetTime_main &rArr; UI_ShowDateTime &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ShowDateTime
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
</UL>

<P><STRONG><a name="[168]"></a>Setup_main</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = Setup_main &rArr; SetTime_main &rArr; UI_ShowDateTime &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_main
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About_main
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusSet
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
</UL>

<P><STRONG><a name="[167]"></a>Mode_main</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = Mode_main &rArr; UI_ShowDateTime &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ShowDateTime
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1556<LI>Call Chain = main &rArr; eigenmath_main &rArr; input_eval_loop() &rArr; run(char*) &rArr; printline(U*) &rArr; print_expr(U*) &rArr; print_term(U*) &rArr; print_a_over_b(U*) &rArr; absval() &rArr;  absval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetCPUFreq
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenmath_main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectFont
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fs_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GetSize
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_TIMConfig
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_EnterStandbyMode
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Config
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusClear
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBrightness
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[401]"></a>PCCon_DisableUSARTIRQ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pccon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCCon_DisableUSARTIRQ &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_Start
</UL>

<P><STRONG><a name="[402]"></a>PCCon_EnableUSARTIRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pccon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[403]"></a>PCCon_EnableDMA</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, pccon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>

<P><STRONG><a name="[408]"></a>PCCon_DisableDMA</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pccon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>

<P><STRONG><a name="[409]"></a>PCCon_RecData</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pccon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCCon_RecData
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_Start
</UL>

<P><STRONG><a name="[40b]"></a>PCCon_Start</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, pccon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PCCon_Start &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_WaitCh
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutCh
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetCh
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_RecData
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_DisableUSARTIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3fa]"></a>PM_Config</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, powerman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PM_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>PM_SetCPUFreq</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, powerman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PM_SetCPUFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[412]"></a>PM_AdcInit</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, powerman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PM_AdcInit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
</UL>

<P><STRONG><a name="[416]"></a>PM_AdcDeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, powerman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PM_AdcDeInit &rArr; ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
</UL>

<P><STRONG><a name="[3e4]"></a>PM_GetVolt</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, powerman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PM_GetVolt &rArr; PM_AdcInit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcDeInit
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_AdcInit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_main
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[41c]"></a>PM_EnterStopMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[3f9]"></a>PM_EnterStandbyMode</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, powerman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PM_EnterStandbyMode &rArr; SPI_Flash_PowerDown &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PowerSave
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_WakeUpPinCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ff]"></a>PM_TIMConfig</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, powerman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PM_TIMConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f7]"></a>RTC_Config</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RTC_Config &rArr; RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f0]"></a>RTC_SetDateTime</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_SetDateTime &rArr; RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
</UL>

<P><STRONG><a name="[424]"></a>SDIO_NVIC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sd_fs_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fs_init
</UL>

<P><STRONG><a name="[3fb]"></a>sd_fs_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sd_fs_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sd_fs_init &rArr; SDIO_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[426]"></a>Sdfs_new</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, sd_fs_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[427]"></a>Sdfs_write</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, sd_fs_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[428]"></a>Sdfs_read</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, sd_fs_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fs_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[429]"></a>GetGBKCode_from_sd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sd_fs_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Chn_Chr
</UL>

<P><STRONG><a name="[42a]"></a>NVIC_Configuration</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[42b]"></a>SD_LowLevel_DeInit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
</UL>

<P><STRONG><a name="[42f]"></a>SD_LowLevel_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[430]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>

<P><STRONG><a name="[434]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>

<P><STRONG><a name="[435]"></a>SD_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
</UL>

<P><STRONG><a name="[43c]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[43e]"></a>SD_SelectDeselect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[445]"></a>SD_GetCardInfo</STRONG> (Thumb, 568 bytes, Stack size 28 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[440]"></a>SD_InitializeCards</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[443]"></a>SD_PowerON</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[369]"></a>SD_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[446]"></a>SD_SendStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[5d8]"></a>SD_Detect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>SD_GetState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[36c]"></a>SD_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[448]"></a>SD_PowerOFF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
</UL>

<P><STRONG><a name="[449]"></a>SD_SendSDStatus</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardStatus
</UL>

<P><STRONG><a name="[44c]"></a>SD_GetCardStatus</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[36d]"></a>SD_ReadBlock</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_ReadBlock &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[36b]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_ReadMultiBlocks &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[44d]"></a>SD_StopTransfer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[44e]"></a>SD_WaitReadOperation</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>

<P><STRONG><a name="[370]"></a>SD_WriteBlock</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_WriteBlock &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[36f]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[452]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>

<P><STRONG><a name="[5d9]"></a>SD_GetTransferState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>SD_Erase</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>

<P><STRONG><a name="[455]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[458]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[5da]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[5db]"></a>SD_GetCapacity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>SPI_FLASH_Init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_FLASH_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45c]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_StartReadSequence
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
</UL>

<P><STRONG><a name="[460]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
</UL>

<P><STRONG><a name="[462]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
</UL>

<P><STRONG><a name="[40e]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_Start
</UL>

<P><STRONG><a name="[463]"></a>SPI_FLASH_BulkErase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[464]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[40f]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_Start
</UL>

<P><STRONG><a name="[465]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[466]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GetSize
</UL>

<P><STRONG><a name="[467]"></a>SPI_FLASH_ReadDeviceID</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[3f4]"></a>SPI_FLASH_GetSize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_GetSize &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[469]"></a>SPI_FLASH_StartReadSequence</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[46a]"></a>SPI_FLASH_ReadByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[46b]"></a>SPI_FLASH_SendHalfWord</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>

<P><STRONG><a name="[41e]"></a>SPI_Flash_PowerDown</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Flash_PowerDown &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_EnterStandbyMode
</UL>

<P><STRONG><a name="[3f3]"></a>SPI_Flash_WAKEUP</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Flash_WAKEUP &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SysTick_Handler &rArr; PM_GetVolt &rArr; PM_AdcInit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_GetVolt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RealUpdate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Stream3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM2_IRQHandler &rArr; LCD_DispBmp1bpp &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusClear
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusSet
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Scan
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RealUpdate
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispBmp1bpp
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART1_IRQHandler &rArr; PCCon_Start &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_Start
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[478]"></a>LCD_FSMC_Config</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_FSMC_Config &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[47b]"></a>LCD_GPIO_Config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AF_FSMC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[47e]"></a>LCD_Rst</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Rst &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[3eb]"></a>LCD_WriteCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
</UL>

<P><STRONG><a name="[5dc]"></a>LCD_WriteReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stn.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>LCD_WriteDat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
</UL>

<P><STRONG><a name="[5dd]"></a>LCD_ReadReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stn.o(.text), UNUSED)

<P><STRONG><a name="[5de]"></a>LCD_ReadDat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stn.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>LCD_SetBrightness</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
</UL>

<P><STRONG><a name="[3f5]"></a>LCD_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_Init &rArr; LCD_FSMC_Config &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rst
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47f]"></a>LCD_Point</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Chn_Chr
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_ASCII_5X7_Chr
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_ASCII_6X12_Chr
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Circle
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_YLine
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_XLine
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispBmp1bpp
</UL>

<P><STRONG><a name="[475]"></a>LCD_DispBmp1bpp</STRONG> (Thumb, 88 bytes, Stack size 36 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_DispBmp1bpp &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3c8]"></a>LCD_Fill</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Fill &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[157]"></a>LCD_Clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenmath_main
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_main
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsoleRedraw
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_main
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About_main
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[153]"></a>LCD_Update</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(unsigned char*)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ShowDateTime
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_main
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About_main
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[15c]"></a>LCD_CursorSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printCursor()
</UL>

<P><STRONG><a name="[15b]"></a>LCD_CursorEn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printCursor()
</UL>

<P><STRONG><a name="[46d]"></a>LCD_RealUpdate</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_RealUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[41d]"></a>LCD_PowerSave</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_EnterStandbyMode
</UL>

<P><STRONG><a name="[3f6]"></a>LCD_StatusClear</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3de]"></a>LCD_StatusSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[480]"></a>LCD_XLine</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_XLine &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rect
</UL>

<P><STRONG><a name="[481]"></a>LCD_YLine</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_YLine &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rect
</UL>

<P><STRONG><a name="[3ed]"></a>LCD_Line</STRONG> (Thumb, 272 bytes, Stack size 52 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Line &rArr; LCD_YLine &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_YLine
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_XLine
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime_main
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
</UL>

<P><STRONG><a name="[482]"></a>LCD_Circle</STRONG> (Thumb, 232 bytes, Stack size 44 bytes, stn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>

<P><STRONG><a name="[483]"></a>LCD_Rect</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_YLine
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_XLine
</UL>

<P><STRONG><a name="[166]"></a>LCD_SelectFont</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[484]"></a>LCD_Display_ASCII_6X12_Chr</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Display_ASCII_6X12_Chr &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
</UL>

<P><STRONG><a name="[485]"></a>LCD_Display_ASCII_5X7_Chr</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Display_ASCII_5X7_Chr &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispNum_5X7
</UL>

<P><STRONG><a name="[486]"></a>LCD_Display_Chn_Chr</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_sd
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
</UL>

<P><STRONG><a name="[151]"></a>LCD_String</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Chn_Chr
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_ASCII_5X7_Chr
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_ASCII_6X12_Chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_main
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(unsigned char*)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ShowDateTime
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_main
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_main
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About_main
</UL>

<P><STRONG><a name="[468]"></a>mypow</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_GetSize
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispNum_5X7
</UL>

<P><STRONG><a name="[3c9]"></a>LCD_DispNum_5X7</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_DispNum_5X7 &rArr; LCD_Display_ASCII_5X7_Chr &rArr; LCD_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_ASCII_5X7_Chr
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ShowDateTime
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_main
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[487]"></a>USART1_Config</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>

<P><STRONG><a name="[40d]"></a>USART1_GetCh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetCh
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_Start
</UL>

<P><STRONG><a name="[40c]"></a>USART1_PutCh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_PutCh
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_Start
</UL>

<P><STRONG><a name="[410]"></a>USART1_WaitCh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_WaitCh
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCCon_Start
</UL>

<P><STRONG><a name="[65]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[2c9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divby1billion(unsigned*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curr_cmd()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[64]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_terms(int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_stack(int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[2d7]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprimef(unsigned*, unsigned*, int)
</UL>

<P><STRONG><a name="[3ca]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G2048_main
</UL>

<P><STRONG><a name="[5df]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_main
</UL>

<P><STRONG><a name="[5e0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[5e1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append(char*, const char*, int)
</UL>

<P><STRONG><a name="[5e3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[15f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append(char*, const char*, int)
</UL>

<P><STRONG><a name="[161]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append(char*, const char*, int)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_token_buf(char*, char*)
</UL>

<P><STRONG><a name="[152]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curr_cmd()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGetLine
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append(char*, const char*, int)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(unsigned char*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_history()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_symbol()
</UL>

<P><STRONG><a name="[1c4]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cmd_history(char*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_eval_loop()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_symbol(char*)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_down_arrow()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_up_arrow()
</UL>

<P><STRONG><a name="[160]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cmd_history(char*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_curr_cmd(char*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curr_cmd()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_symbol(char*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsolePutChar
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dConsolePut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append(char*, const char*, int)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_string(char*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_history()
</UL>

<P><STRONG><a name="[327]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_bignum_to_double(unsigned*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_numbers()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step2(int, int)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monic(int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_fa(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly(int)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosh
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract_numbers()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step2(int, int)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monic(int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_fa(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly(int)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_bignum_to_double(unsigned*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_numbers()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step2(int, int)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monic(int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_fa(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly(int)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosh
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_number()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide_numbers()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalq(U*, int, int)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step2(int, int)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monic(int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosh
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalq(U*, int, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_bignum_to_double(unsigned*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rational_to_double(U*)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalq(U*, int, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isplusone(U*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_isinteger()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirac()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_numbers(U*, U*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step2(int, int)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_args()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_numbers(U*, U*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly(int)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysgn()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[328]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run(char*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_low_level()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest()
</UL>

<P><STRONG><a name="[324]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
</UL>

<P><STRONG><a name="[5e4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[48c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[5e5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[48b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[5e6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5e7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[495]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[5e8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[492]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[491]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[4af]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[5e9]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[497]"></a>_drem</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[498]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[5ea]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[49c]"></a>_scanf_really_real</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[62]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[49b]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[49e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[5eb]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[5ec]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[5ed]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[5ee]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[49f]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5ef]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[251]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f0]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[5f1]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4a1]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f2]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a3]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstr(unsigned*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number(U*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_double(U*, int)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_mem_info()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mroot()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mprime()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mpow()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodf(int, int, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdivf(int, int, int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmulf(int, int, int)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmodpow()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msubf(int, int, int)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_maddf(int, int, int)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_read
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdfs_new
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Info_main
</UL>

<P><STRONG><a name="[5f3]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[5f4]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4a2]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f5]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[5f6]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[16c]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dPrintf
</UL>

<P><STRONG><a name="[5f7]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[4a6]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
</UL>

<P><STRONG><a name="[5f8]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[a9]"></a>__hardfp_acos</STRONG> (Thumb, 738 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_acos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccos()
</UL>

<P><STRONG><a name="[ba]"></a>__hardfp_asin</STRONG> (Thumb, 774 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsin()
</UL>

<P><STRONG><a name="[c1]"></a>__hardfp_atan</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctan()
</UL>

<P><STRONG><a name="[104]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_scan_float(char*)
</UL>

<P><STRONG><a name="[115]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyceiling()
</UL>

<P><STRONG><a name="[143]"></a>__hardfp_cos</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
</UL>

<P><STRONG><a name="[14c]"></a>__hardfp_cosh</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, cosh.o(i.__hardfp_cosh))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __hardfp_cosh &rArr; exp &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
</UL>

<P><STRONG><a name="[1d4]"></a>__hardfp_erfc</STRONG> (Thumb, 916 bytes, Stack size 64 bytes, erf.o(i.__hardfp_erfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __hardfp_erfc &rArr; exp &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerfc()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyerf()
</UL>

<P><STRONG><a name="[2fb]"></a>__hardfp_exp</STRONG> (Thumb, 726 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yypower()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[144]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_nroots()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arg()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step2(int, int)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yycosh()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine_of_angle()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
</UL>

<P><STRONG><a name="[261]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloor()
</UL>

<P><STRONG><a name="[1b2]"></a>__hardfp_fmod</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, fmod.o(i.__hardfp_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_fmod &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
</UL>

<P><STRONG><a name="[b6]"></a>__hardfp_log</STRONG> (Thumb, 888 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arctanh()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yylog()
</UL>

<P><STRONG><a name="[1b3]"></a>__hardfp_pow</STRONG> (Thumb, 3132 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
</UL>

<P><STRONG><a name="[1b4]"></a>__hardfp_sin</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpow()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine_of_angle()
</UL>

<P><STRONG><a name="[35b]"></a>__hardfp_sinh</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, sinh.o(i.__hardfp_sinh))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __hardfp_sinh &rArr; exp &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysinh()
</UL>

<P><STRONG><a name="[b4]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arcsinh()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arccosh()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step2(int, int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findroot(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divpoly(int)
</UL>

<P><STRONG><a name="[35f]"></a>__hardfp_tan</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yytangent()
</UL>

<P><STRONG><a name="[360]"></a>__hardfp_tanh</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, tanh.o(i.__hardfp_tanh))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_tanh &rArr; __mathlib_expm1 &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tanh()
</UL>

<P><STRONG><a name="[4aa]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 972 bytes, Stack size 168 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[4ac]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[4a4]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[4ab]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[4b0]"></a>__kernel_tan</STRONG> (Thumb, 772 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[4a7]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
</UL>

<P><STRONG><a name="[4ad]"></a>__mathlib_expm1</STRONG> (Thumb, 1288 bytes, Stack size 80 bytes, expm1_i.o(i.__mathlib_expm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __mathlib_expm1 &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosh
</UL>

<P><STRONG><a name="[4a9]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[5f9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[5fa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[5fb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4a3]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosh
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_expm1
</UL>

<P><STRONG><a name="[49d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4ae]"></a>exp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exp.o(i.exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = exp &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosh
</UL>

<P><STRONG><a name="[4a8]"></a>fabs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanh
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinh
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosh
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[9e]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstr(unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test(char*, char**, int)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cmd_history(char*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_down_arrow()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_up_arrow()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_token_buf(char*, char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
</UL>

<P><STRONG><a name="[32e]"></a>isdigit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scan.o(i.isdigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isdigit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token()
</UL>

<P><STRONG><a name="[9b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstr(unsigned*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curr_cmd()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determinant(int)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_history()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_token_buf(char*, char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_sum(int)
</UL>

<P><STRONG><a name="[4a5]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6a]"></a>SetSysClock</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[10e]"></a>ybinomial()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, binomial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = ybinomial() &rArr; subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_args()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binomial()
</UL>

<P><STRONG><a name="[111]"></a>check_args()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, binomial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_args() &rArr; lessp(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessp(U*, U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybinomial()
</UL>

<P><STRONG><a name="[1a5]"></a>check_arg()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, det.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detg()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;det()
</UL>

<P><STRONG><a name="[1a7]"></a>ydirac()</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, dirac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + In Cycle
<LI>Call Chain = ydirac() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirac()
</UL>

<P><STRONG><a name="[5e]"></a>__cmp(const void*, const void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, divisors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = __cmp(const void*, const void*) &rArr; cmp_expr(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> divisors.o(.text)
</UL>
<P><STRONG><a name="[1aa]"></a>gen(int, int)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, divisors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + In Cycle
<LI>Call Chain = gen(int, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign(int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen(int, int)
</UL>

<P><STRONG><a name="[1ac]"></a>__factor_add()</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, divisors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + In Cycle
<LI>Call Chain = __factor_add() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isplusone(U*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_small_number()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
</UL>

<P><STRONG><a name="[1b8]"></a>step2(int, int)</STRONG> (Thumb, 688 bytes, Stack size 80 bytes, eigen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = step2(int, int) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigen(int)
</UL>

<P><STRONG><a name="[1b9]"></a>eigen(int)</STRONG> (Thumb, 624 bytes, Stack size 56 bytes, eigen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = eigen(int) &rArr; copy_tensor() &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tensor()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printstr(char*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step2(int, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenvec()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenval()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigen()
</UL>

<P><STRONG><a name="[1ba]"></a>check_arg()</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, eigen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + In Cycle
<LI>Call Chain = check_arg() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfloat()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenvec()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigenval()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_eigen()
</UL>

<P><STRONG><a name="[1d1]"></a>yyerf()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, erf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = yyerf() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_double(double)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erfc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yerf()
</UL>

<P><STRONG><a name="[24f]"></a>evalpoly()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, factorpoly.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = evalpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_factor()
</UL>

<P><STRONG><a name="[250]"></a>get_factor()</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, factorpoly.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + In Cycle
<LI>Call Chain = get_factor() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(U*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evalpoly()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divisors_onstack()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
</UL>

<P><STRONG><a name="[257]"></a>yydivpoly()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, factorpoly.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = yydivpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
</UL>

<P><STRONG><a name="[255]"></a>rationalize_coefficients(int)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, factorpoly.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + In Cycle
<LI>Call Chain = rationalize_coefficients(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denominator()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyfactorpoly()
</UL>

<P><STRONG><a name="[265]"></a>gamma_of_sum()</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, gamma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + In Cycle
<LI>Call Chain = gamma_of_sum() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma()
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gammaf()
</UL>

<P><STRONG><a name="[267]"></a>gammaf()</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, gamma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + In Cycle
<LI>Call Chain = gammaf() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativeterm(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma_of_sum()
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamma()
</UL>

<P><STRONG><a name="[27b]"></a>inner_f()</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = inner_f() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner()
</UL>

<P><STRONG><a name="[286]"></a>check_arg()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, inv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invg()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv()
</UL>

<P><STRONG><a name="[29d]"></a>__legendre3(int)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, legendre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + In Cycle
<LI>Call Chain = __legendre3(int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosine()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;square()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
</UL>

<P><STRONG><a name="[29f]"></a>__legendre2(int, int)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, legendre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + In Cycle
<LI>Call Chain = __legendre2(int, int) &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivative()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre()
</UL>

<P><STRONG><a name="[2a0]"></a>__legendre()</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, legendre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + In Cycle
<LI>Call Chain = __legendre() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subst()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre2(int, int)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__legendre3(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;legendre()
</UL>

<P><STRONG><a name="[2a5]"></a>subf(unsigned*, unsigned*)</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, madd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = subf(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msub(unsigned*, unsigned*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;madd(unsigned*, unsigned*)
</UL>

<P><STRONG><a name="[2a6]"></a>addf(unsigned*, unsigned*)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, madd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = addf(unsigned*, unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnew(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msub(unsigned*, unsigned*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;madd(unsigned*, unsigned*)
</UL>

<P><STRONG><a name="[2b7]"></a>egcd(unsigned*, unsigned*)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mgcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = egcd(unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mgcd()
</UL>

<P><STRONG><a name="[2c2]"></a>unique_f(U*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, misce.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unique_f(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unique(U*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unique_f(U*)
</UL>

<P><STRONG><a name="[5f]"></a>__cmp(const void*, const void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, misce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = __cmp(const void*, const void*) &rArr; cmp_expr(U*, U*) &rArr;  cmp_expr(U*, U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_expr(U*, U*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misce.o(.text)
</UL>
<P><STRONG><a name="[2c8]"></a>mulf(unsigned*, unsigned*, int, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mulf(unsigned*, unsigned*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
</UL>

<P><STRONG><a name="[2ca]"></a>subf(unsigned*, unsigned*, int)</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = subf(unsigned*, unsigned*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdivrem(unsigned**, unsigned**, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
</UL>

<P><STRONG><a name="[2ce]"></a>test_mmulf(int, int, int)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = test_mmulf(int, int, int) &rArr; mmul(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmul()
</UL>

<P><STRONG><a name="[2d0]"></a>test_mdivf(int, int, int)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = test_mdivf(int, int, int) &rArr; mdiv(unsigned*, unsigned*) &rArr; mint(int) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiv(unsigned*, unsigned*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mdiv()
</UL>

<P><STRONG><a name="[2d2]"></a>test_mmodf(int, int, int)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, mmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = test_mmodf(int, int, int) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmp(unsigned*, unsigned*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout(char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errout()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mmod()
</UL>

<P><STRONG><a name="[2d6]"></a>mprimef(unsigned*, unsigned*, int)</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, mprime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = mprimef(unsigned*, unsigned*, int) &rArr; mmodpow(unsigned*, unsigned*, unsigned*) &rArr; mmod(unsigned*, unsigned*) &rArr; mcopy(unsigned*) &rArr; mnew(int) &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmul(unsigned*, unsigned*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcopy(unsigned*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmodpow(unsigned*, unsigned*, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmod(unsigned*, unsigned*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msub(unsigned*, unsigned*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprime(unsigned*)
</UL>

<P><STRONG><a name="[2dc]"></a>divby1billion(unsigned*)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = divby1billion(unsigned*) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstr(unsigned*)
</UL>

<P><STRONG><a name="[2dd]"></a>__is_radical_number(U*)</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __is_radical_number(U*) &rArr; isminusone(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__normalize_radical_factors(int)
</UL>

<P><STRONG><a name="[2de]"></a>__normalize_radical_factors(int)</STRONG> (Thumb, 738 bytes, Stack size 40 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = __normalize_radical_factors(int) &rArr; subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isplusone(U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__is_radical_number(U*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
</UL>

<P><STRONG><a name="[2e2]"></a>parse_p2()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parse_p2()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
</UL>

<P><STRONG><a name="[2e1]"></a>parse_p1()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, multiply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parse_p1()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yymultiply()
</UL>

<P><STRONG><a name="[310]"></a>normalize_angle()</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, qpow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + In Cycle
<LI>Call Chain = normalize_angle() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpowf()
</UL>

<P><STRONG><a name="[311]"></a>qpowf()</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, qpow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + In Cycle
<LI>Call Chain = qpowf() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinteger(U*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpow(unsigned*, unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_denominator()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_numerator()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mint(int)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isplusone(U*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfree(unsigned*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mroot(unsigned*, unsigned)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_angle()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpow()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpow()
</UL>

<P><STRONG><a name="[313]"></a>quickpower()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, quickfactor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = quickpower() &rArr; subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_power_number(int)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_truncate()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_integer()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_symbol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_quickfactor()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickfactor()
</UL>

<P><STRONG><a name="[316]"></a>__lcm()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + In Cycle
<LI>Call Chain = __lcm() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators_factor(U*)
</UL>

<P><STRONG><a name="[317]"></a>multiply_denominators_factor(U*)</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = multiply_denominators_factor(U*) &rArr; __lcm() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnegativenumber(U*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcm()
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators_term(U*)
</UL>

<P><STRONG><a name="[318]"></a>multiply_denominators_term(U*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = multiply_denominators_term(U*) &rArr; multiply_denominators_factor(U*) &rArr; __lcm() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators_factor(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators(U*)
</UL>

<P><STRONG><a name="[31b]"></a>multiply_denominators(U*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = multiply_denominators(U*) &rArr; multiply_denominators_term(U*) &rArr; multiply_denominators_factor(U*) &rArr; __lcm() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_denominators_term(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
</UL>

<P><STRONG><a name="[31a]"></a>__rationalize_tensor()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rationalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + In Cycle
<LI>Call Chain = __rationalize_tensor() &rArr;  rationalize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yyrationalize()
</UL>

<P><STRONG><a name="[31f]"></a>mini_solve()</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, roots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = mini_solve() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coeff()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_rational(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots3()
</UL>

<P><STRONG><a name="[320]"></a>roots3()</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, roots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = roots3() &rArr; mini_solve() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispoly(U*, U*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isposint(U*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mini_solve()
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots2()
</UL>

<P><STRONG><a name="[321]"></a>roots2()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, roots.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = roots2() &rArr; factorpoly() &rArr; yyfactorpoly() &rArr;  multiply() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorpoly()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots3()
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roots()
</UL>

<P><STRONG><a name="[34b]"></a>yysimfac(int)</STRONG> (Thumb, 2424 bytes, Stack size 40 bytes, simfac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = yysimfac(int) &rArr; subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factorial()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equaln(U*, int)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isplusone(U*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal(U*, U*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocate()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isminusone(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac_term()
</UL>

<P><STRONG><a name="[34c]"></a>simfac_term()</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, simfac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = simfac_term() &rArr; yysimfac(int) &rArr; subtract() &rArr;  negate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply_all_noexpand(int)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yysimfac(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simfac()
</UL>

<P><STRONG><a name="[34f]"></a>count(U*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = count(U*) &rArr;  count(U*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f2()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f9()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count(U*)
</UL>

<P><STRONG><a name="[350]"></a>f9()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + In Cycle
<LI>Call Chain = f9() &rArr;  simplify() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_integer(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
</UL>

<P><STRONG><a name="[351]"></a>f5()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + In Cycle
<LI>Call Chain = f5() &rArr;  eval() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find(U*, U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nterms(U*)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_trig()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
</UL>

<P><STRONG><a name="[353]"></a>simplify_tensor()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + In Cycle
<LI>Call Chain = simplify_tensor() &rArr;  simplify() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
</UL>

<P><STRONG><a name="[352]"></a>nterms(U*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nterms(U*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5()
</UL>

<P><STRONG><a name="[357]"></a>f4()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + In Cycle
<LI>Call Chain = f4() &rArr;  rationalize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iszero(U*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
</UL>

<P><STRONG><a name="[356]"></a>f2()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = f2() &rArr;  Condense() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Condense()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
</UL>

<P><STRONG><a name="[355]"></a>f1()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, simplify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = f1() &rArr;  rationalize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rationalize()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count(U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplify_main()
</UL>

<P><STRONG><a name="[362]"></a>promote_tensor()</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = promote_tensor() &rArr; alloc_tensor(int) &rArr; alloc() &rArr; stop(char*) &rArr; printstr(char*) &rArr; printchar(int) &rArr; dConsolePutChar &rArr; dConsoleRedraw &rArr; print(unsigned char*) &rArr; LCD_String &rArr; LCD_Display_Chn_Chr &rArr; GetGBKCode_from_sd &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tensor(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop(char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push(U*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_tensor()
</UL>

<P><STRONG><a name="[371]"></a>move_window</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[372]"></a>sync</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[377]"></a>remove_chain</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[378]"></a>create_chain</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[379]"></a>dir_sdi</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[37b]"></a>dir_next</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[37c]"></a>dir_read</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[37d]"></a>dir_register</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[37f]"></a>dir_remove</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[380]"></a>create_name</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[38f]"></a>get_fileinfo</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[381]"></a>follow_path</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[382]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; disk_read &rArr; SD_ReadMultiBlocks &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[383]"></a>chk_mounted</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = chk_mounted &rArr; disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[37e]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[373]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[388]"></a>validate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[3a8]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[3a7]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[3ba]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[3b8]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[436]"></a>CmdResp1Error</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
</UL>

<P><STRONG><a name="[43a]"></a>SDEnWideBus</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDEnWideBus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[43f]"></a>CmdResp2Error</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[453]"></a>IsCardProgramming</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>

<P><STRONG><a name="[442]"></a>CmdResp6Error</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[46f]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[46e]"></a>NVIC_SystemReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[47d]"></a>LCD_AF_FSMC_Config</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_AF_FSMC_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[4b1]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a0]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[4b3]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b2]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[66]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[493]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[49a]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
